{
	"info": {
		"_postman_id": "0e54c4ea-2302-428e-a442-62a8b1b15c47",
		"name": "COALA APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "armeo",
			"item": [
				{
					"name": "area",
					"item": [
						{
							"name": "{feature Id}",
							"item": [
								{
									"name": "/armeo/area/:featureId",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/armeo/area/:featureId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"armeo",
												"area",
												":featureId"
											],
											"variable": [
												{
													"key": "featureId",
													"value": "<int>",
													"description": "(Required) Feature id"
												}
											]
										},
										"description": "Fetches a single feature."
									},
									"response": [
										{
											"name": "No such feature",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/armeo/area/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"armeo",
														"area",
														":featureId"
													],
													"variable": [
														{
															"key": "featureId",
															"value": "<int>",
															"description": "(Required) Feature id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Feature data",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/armeo/area/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"armeo",
														"area",
														":featureId"
													],
													"variable": [
														{
															"key": "featureId",
															"value": "<int>",
															"description": "(Required) Feature id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/armeo/area/:featureId",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/armeo/area/:featureId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"armeo",
												"area",
												":featureId"
											],
											"variable": [
												{
													"key": "featureId",
													"value": "<int>",
													"description": "(Required) Feature id"
												}
											]
										},
										"description": "Removes a given feature."
									},
									"response": [
										{
											"name": "No such feature",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/armeo/area/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"armeo",
														"area",
														":featureId"
													],
													"variable": [
														{
															"key": "featureId",
															"value": "<int>",
															"description": "(Required) Feature id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Feature removed",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/armeo/area/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"armeo",
														"area",
														":featureId"
													],
													"variable": [
														{
															"key": "featureId",
															"value": "<int>",
															"description": "(Required) Feature id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/armeo/area/:featureId",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{baseUrl}}/armeo/area/:featureId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"armeo",
												"area",
												":featureId"
											],
											"variable": [
												{
													"key": "featureId",
													"value": "<int>",
													"description": "(Required) Feature id"
												}
											]
										},
										"description": "Updates given feature.\n\nRequest payload must provide two properties - geometry containing a geoJSON geometry and properties contating feature properties.\n"
									},
									"response": [
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{baseUrl}}/armeo/area/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"armeo",
														"area",
														":featureId"
													],
													"variable": [
														{
															"key": "featureId",
															"value": "<int>",
															"description": "(Required) Feature id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Feature updated",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{baseUrl}}/armeo/area/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"armeo",
														"area",
														":featureId"
													],
													"variable": [
														{
															"key": "featureId",
															"value": "<int>",
															"description": "(Required) Feature id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "No such feature",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{baseUrl}}/armeo/area/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"armeo",
														"area",
														":featureId"
													],
													"variable": [
														{
															"key": "featureId",
															"value": "<int>",
															"description": "(Required) Feature id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/armeo/area",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"\"",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/armeo/area",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"armeo",
										"area"
									]
								},
								"description": "Upload new areas list in the geoJSON FeatureCollection format."
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"\"",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/armeo/area",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"armeo",
												"area"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Areas uploaded successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"\"",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/armeo/area",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"armeo",
												"area"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"OK\",\n  \"count\": 398\n}"
								}
							]
						},
						{
							"name": "/armeo/area",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseUrl}}/armeo/area",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"armeo",
										"area"
									]
								},
								"description": "Creates a single new feature.\n\nRequest payload must provide two properties - geometry containing a geoJSON geometry and properties contating feature properties.\n"
							},
							"response": [
								{
									"name": "Feature created",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{baseUrl}}/armeo/area",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"armeo",
												"area"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": 6,\n  \"properties\": {\n    \"EditDate\": \"2018-06-11T00:00:00.000Z\",\n    \"crop_name\": \"Winter Cereal\",\n    \"crop_type\": \"Wh\"\n  },\n  \"geometry\": \"{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[16.643945837,48.211827237],[16.644370037,48.212373716],[16.654282306,48.211210535],[16.65416097,48.210665933],[16.643945837,48.211827237]]]}\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{baseUrl}}/armeo/area",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"armeo",
												"area"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/armeo/area",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/armeo/area?lon=<number>&lat=<number>&distance=1000000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"armeo",
										"area"
									],
									"query": [
										{
											"key": "lon",
											"value": "<number>",
											"description": "(Required) Longitute coordinate, e.g. 16.48"
										},
										{
											"key": "lat",
											"value": "<number>",
											"description": "(Required) Latitude coordinate, e.g. 48.21"
										},
										{
											"key": "distance",
											"value": "1000000",
											"description": "(Required) Distance in meters around {lon, lat}"
										}
									]
								},
								"description": "Search for nearby areas."
							},
							"response": [
								{
									"name": "Successful search (although it can return no hits)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/armeo/area?lon=<number>&lat=<number>&distance=1000000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"armeo",
												"area"
											],
											"query": [
												{
													"key": "lon",
													"value": "<number>"
												},
												{
													"key": "lat",
													"value": "<number>"
												},
												{
													"key": "distance",
													"value": "1000000"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": 6,\n    \"properties\": {\n      \"EditDate\": \"2018-06-11T00:00:00.000Z\",\n      \"crop_name\": \"Winter Cereal\",\n      \"crop_type\": \"Wh\"\n    },\n    \"geometry\": \"{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[16.643945837,48.211827237],[16.644370037,48.212373716],[16.654282306,48.211210535],[16.65416097,48.210665933],[16.643945837,48.211827237]]]}\"\n  },\n  {\n    \"id\": 8,\n    \"properties\": {\n      \"EditDate\": \"2018-07-01T00:00:00.000Z\",\n      \"crop_name\": \"Mais\",\n      \"crop_type\": \"Ma\"\n    },\n    \"geometry\": \"{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[16.644640122,48.21272141],[16.644985693,48.213551321],[16.65486067,48.212282196],[16.654632157,48.211780086],[16.644640122,48.21272141]]]}\"\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "point",
					"item": [
						{
							"name": "{feature Id}",
							"item": [
								{
									"name": "/armeo/point/:featureId",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/armeo/point/:featureId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"armeo",
												"point",
												":featureId"
											],
											"variable": [
												{
													"key": "featureId",
													"value": "<int>",
													"description": "(Required) Feature id"
												}
											]
										},
										"description": "Fetches a single feature."
									},
									"response": [
										{
											"name": "Feature data",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/armeo/point/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"armeo",
														"point",
														":featureId"
													],
													"variable": [
														{
															"key": "featureId",
															"value": "<int>",
															"description": "(Required) Feature id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "No such feature",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/armeo/point/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"armeo",
														"point",
														":featureId"
													],
													"variable": [
														{
															"key": "featureId",
															"value": "<int>",
															"description": "(Required) Feature id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/armeo/point/:featureId",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/armeo/point/:featureId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"armeo",
												"point",
												":featureId"
											],
											"variable": [
												{
													"key": "featureId",
													"value": "<int>",
													"description": "(Required) Feature id"
												}
											]
										},
										"description": "Removes a given feature."
									},
									"response": [
										{
											"name": "Feature removed",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/armeo/point/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"armeo",
														"point",
														":featureId"
													],
													"variable": [
														{
															"key": "featureId",
															"value": "<int>",
															"description": "(Required) Feature id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "No such feature",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/armeo/point/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"armeo",
														"point",
														":featureId"
													],
													"variable": [
														{
															"key": "featureId",
															"value": "<int>",
															"description": "(Required) Feature id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/armeo/point/:featureId",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{baseUrl}}/armeo/point/:featureId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"armeo",
												"point",
												":featureId"
											],
											"variable": [
												{
													"key": "featureId",
													"value": "<int>",
													"description": "(Required) Feature id"
												}
											]
										},
										"description": "Updates given feature.\n\nRequest payload must provide two properties - geometry containing a geoJSON geometry and properties contating feature properties.\n"
									},
									"response": [
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{baseUrl}}/armeo/point/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"armeo",
														"point",
														":featureId"
													],
													"variable": [
														{
															"key": "featureId",
															"value": "<int>",
															"description": "(Required) Feature id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Feature updated",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{baseUrl}}/armeo/point/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"armeo",
														"point",
														":featureId"
													],
													"variable": [
														{
															"key": "featureId",
															"value": "<int>",
															"description": "(Required) Feature id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "No such feature",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{baseUrl}}/armeo/point/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"armeo",
														"point",
														":featureId"
													],
													"variable": [
														{
															"key": "featureId",
															"value": "<int>",
															"description": "(Required) Feature id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/armeo/point",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\"\"",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/armeo/point",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"armeo",
										"point"
									]
								},
								"description": "Upload new points list in the geoJSON FeatureCollection format."
							},
							"response": [
								{
									"name": "points uploaded successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"\"",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/armeo/point",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"armeo",
												"point"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"OK\",\n  \"count\": 398\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"\"",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/armeo/point",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"armeo",
												"point"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/armeo/point",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{baseUrl}}/armeo/point",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"armeo",
										"point"
									]
								},
								"description": "Creates a single new feature.\n\nRequest payload must provide two properties - geometry containing a geoJSON geometry and properties contating feature properties.\n"
							},
							"response": [
								{
									"name": "Feature created",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{baseUrl}}/armeo/point",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"armeo",
												"point"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": 6,\n  \"properties\": {\n    \"EditDate\": \"2018-06-11T00:00:00.000Z\",\n    \"crop_name\": \"Winter Cereal\",\n    \"crop_type\": \"Wh\"\n  },\n  \"geometry\": \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[16.641655937,48.211296566]}\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{baseUrl}}/armeo/point",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"armeo",
												"point"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/armeo/point",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/armeo/point?lon=<number>&lat=<number>&distance=1000000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"armeo",
										"point"
									],
									"query": [
										{
											"key": "lon",
											"value": "<number>",
											"description": "(Required) Longitute coordinate, e.g. 16.48"
										},
										{
											"key": "lat",
											"value": "<number>",
											"description": "(Required) Latitude coordinate, e.g. 48.21"
										},
										{
											"key": "distance",
											"value": "1000000",
											"description": "(Required) Distance in meters around {lon, lat}"
										}
									]
								},
								"description": "Search for nearby points."
							},
							"response": [
								{
									"name": "Successful search (although it can return no hits)",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/armeo/point?lon=<number>&lat=<number>&distance=1000000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"armeo",
												"point"
											],
											"query": [
												{
													"key": "lon",
													"value": "<number>"
												},
												{
													"key": "lat",
													"value": "<number>"
												},
												{
													"key": "distance",
													"value": "1000000"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": 6,\n    \"properties\": {\n      \"EditDate\": \"2018-06-11T00:00:00.000Z\",\n      \"crop_name\": \"Winter Cereal\",\n      \"crop_type\": \"Wh\"\n    },\n    \"geometry\": \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[16.641655937,48.211296566]}\"\n  },\n  {\n    \"id\": 8,\n    \"properties\": {\n      \"EditDate\": \"2018-07-01T00:00:00.000Z\",\n      \"crop_name\": \"Mais\",\n      \"crop_type\": \"Ma\"\n    },\n    \"geometry\": \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[16.741655937,48.111296566]}\"\n  }\n]"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "owner",
			"item": [
				{
					"name": "{owner Id}",
					"item": [
						{
							"name": "polygon",
							"item": [
								{
									"name": "{polygon Id}",
									"item": [
										{
											"name": "irrigation",
											"item": [
												{
													"name": "{date Id}",
													"item": [
														{
															"name": "/owner/:ownerId/polygon/:polygonId/irrigation/:dateId",
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/x-www-form-urlencoded"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "urlencoded",
																	"urlencoded": [
																		{
																			"key": "date",
																			"value": "<date>"
																		},
																		{
																			"key": "value",
																			"value": "<int>"
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/owner/:ownerId/polygon/:polygonId/irrigation/:dateId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"owner",
																		":ownerId",
																		"polygon",
																		":polygonId",
																		"irrigation",
																		":dateId"
																	],
																	"variable": [
																		{
																			"key": "ownerId",
																			"value": "<string>",
																			"description": "(Required) User's login. Must match user name passed in the authentication data."
																		},
																		{
																			"key": "polygonId",
																			"value": "<integer>",
																			"description": "(Required) "
																		},
																		{
																			"key": "dateId",
																			"value": "<string>",
																			"description": "(Required) Requested date. A special value of `now` indicates the current date."
																		}
																	]
																},
																"description": "Creates or updates iformation on a performed irrigation."
															},
															"response": [
																{
																	"name": "Updated",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"description": "Added as a part of security scheme: basic",
																				"key": "Authorization",
																				"value": "Basic <credentials>"
																			}
																		],
																		"body": {
																			"mode": "urlencoded",
																			"urlencoded": [
																				{
																					"key": "date",
																					"value": "2019-05-20"
																				},
																				{
																					"key": "value",
																					"value": "1"
																				}
																			]
																		},
																		"url": {
																			"raw": "{{baseUrl}}/owner/:ownerId/polygon/:polygonId/irrigation/:dateId",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"owner",
																				":ownerId",
																				"polygon",
																				":polygonId",
																				"irrigation",
																				":dateId"
																			],
																			"variable": [
																				{
																					"key": "ownerId",
																					"value": "<string>",
																					"description": "(Required) User's login. Must match user name passed in the authentication data."
																				},
																				{
																					"key": "polygonId",
																					"value": "<integer>",
																					"description": "(Required) "
																				},
																				{
																					"key": "dateId",
																					"value": "<string>",
																					"description": "(Required) Requested date. A special value of `now` indicates the current date."
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"example\": {\n    \"date\": \"2019-05-20\",\n    \"dataType\": \"irrigation\",\n    \"value\": 1\n  }\n}"
																},
																{
																	"name": "Created",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"description": "Added as a part of security scheme: basic",
																				"key": "Authorization",
																				"value": "Basic <credentials>"
																			}
																		],
																		"body": {
																			"mode": "urlencoded",
																			"urlencoded": [
																				{
																					"key": "date",
																					"value": "2019-05-20"
																				},
																				{
																					"key": "value",
																					"value": "1"
																				}
																			]
																		},
																		"url": {
																			"raw": "{{baseUrl}}/owner/:ownerId/polygon/:polygonId/irrigation/:dateId",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"owner",
																				":ownerId",
																				"polygon",
																				":polygonId",
																				"irrigation",
																				":dateId"
																			],
																			"variable": [
																				{
																					"key": "ownerId",
																					"value": "<string>",
																					"description": "(Required) User's login. Must match user name passed in the authentication data."
																				},
																				{
																					"key": "polygonId",
																					"value": "<integer>",
																					"description": "(Required) "
																				},
																				{
																					"key": "dateId",
																					"value": "<string>",
																					"description": "(Required) Requested date. A special value of `now` indicates the current date."
																				}
																			]
																		}
																	},
																	"status": "Created",
																	"code": 201,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"example\": {\n    \"date\": \"2019-05-20\",\n    \"dataType\": \"irrigation\",\n    \"value\": 1\n  }\n}"
																}
															]
														},
														{
															"name": "/owner/:ownerId/polygon/:polygonId/irrigation/:dateId",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/owner/:ownerId/polygon/:polygonId/irrigation/:dateId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"owner",
																		":ownerId",
																		"polygon",
																		":polygonId",
																		"irrigation",
																		":dateId"
																	],
																	"variable": [
																		{
																			"key": "ownerId",
																			"value": "<string>",
																			"description": "(Required) User's login. Must match user name passed in the authentication data."
																		},
																		{
																			"key": "polygonId",
																			"value": "<integer>",
																			"description": "(Required) "
																		},
																		{
																			"key": "dateId",
																			"value": "<string>",
																			"description": "(Required) "
																		}
																	]
																},
																"description": "Deletes a given irrigation record."
															},
															"response": [
																{
																	"name": "Deleted",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"description": "Added as a part of security scheme: basic",
																				"key": "Authorization",
																				"value": "Basic <credentials>"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/owner/:ownerId/polygon/:polygonId/irrigation/:dateId",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"owner",
																				":ownerId",
																				"polygon",
																				":polygonId",
																				"irrigation",
																				":dateId"
																			],
																			"variable": [
																				{
																					"key": "ownerId",
																					"value": "<string>",
																					"description": "(Required) User's login. Must match user name passed in the authentication data."
																				},
																				{
																					"key": "polygonId",
																					"value": "<integer>",
																					"description": "(Required) "
																				},
																				{
																					"key": "dateId",
																					"value": "<string>",
																					"description": "(Required) "
																				}
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												},
												{
													"name": "/owner/:ownerId/polygon/:polygonId/irrigation",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/owner/:ownerId/polygon/:polygonId/irrigation?dateFrom=beginning of the current year",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"owner",
																":ownerId",
																"polygon",
																":polygonId",
																"irrigation"
															],
															"query": [
																{
																	"key": "dateFrom",
																	"value": "beginning of the current year",
																	"description": "Beginning of the queried time period."
																}
															],
															"variable": [
																{
																	"key": "ownerId",
																	"value": "<string>",
																	"description": "(Required) User's login. Must match user name passed in the authentication data."
																},
																{
																	"key": "polygonId",
																	"value": "<integer>",
																	"description": "(Required) "
																}
															]
														},
														"description": "Returns a list of reported irrigations."
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/owner/:ownerId/polygon/:polygonId/irrigation?dateFrom=beginning of the current year",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"owner",
																		":ownerId",
																		"polygon",
																		":polygonId",
																		"irrigation"
																	],
																	"query": [
																		{
																			"key": "dateFrom",
																			"value": "beginning of the current year"
																		}
																	],
																	"variable": [
																		{
																			"key": "ownerId",
																			"value": "<string>",
																			"description": "(Required) User's login. Must match user name passed in the authentication data."
																		},
																		{
																			"key": "polygonId",
																			"value": "<integer>",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"date\": \"2019-05-20\",\n    \"dataType\": \"irrigation\",\n    \"value\": 2\n  },\n  {\n    \"date\": \"2019-04-04\",\n    \"dataType\": \"irrigation\",\n    \"value\": 10\n  }\n]"
														}
													]
												}
											]
										},
										{
											"name": "/owner/:ownerId/polygon/:polygonId",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/owner/:ownerId/polygon/:polygonId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"owner",
														":ownerId",
														"polygon",
														":polygonId"
													],
													"variable": [
														{
															"key": "ownerId",
															"value": "<string>",
															"description": "(Required) User's login. Must match user name passed in the authentication data."
														},
														{
															"key": "polygonId",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												},
												"description": "Returns information about a given field."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/owner/:ownerId/polygon/:polygonId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"owner",
																":ownerId",
																"polygon",
																":polygonId"
															],
															"variable": [
																{
																	"key": "ownerId",
																	"value": "<string>",
																	"description": "(Required) User's login. Must match user name passed in the authentication data."
																},
																{
																	"key": "polygonId",
																	"value": "<integer>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"example\": {\n    \"polygonId\": 26193,\n    \"name\": 1,\n    \"payment\": \"2025-01-01\",\n    \"plantingDate\": \"2019-04-30\",\n    \"crop\": \"Äpfel\",\n    \"lng\": 1766398.2283864,\n    \"lat\": 6183832.5001144,\n    \"geometry\": \"{\\\"type\\\":\\\"MultiPolygon\\\",\\\"coordinates\\\":[[[[1766216.17120276,6183820.31406724],[1766306.24730603,6184015.91177969],[1766306.23729084,6184020.37940185],[1766408.21855234,6184216.57060949],[1766538.93719074,6184146.93093963],[1766585.13293664,6184119.46639114],[1766461.37538407,6183884.25154922],[1766423.80078949,6183801.95970166],[1766313.57201698,6183812.8155301],[1766235.0633551,6183817.73899216],[1766214.38204529,6183819.20926239],[1766158.82411059,6183824.64370521],[1766161.19533519,6183813.38241954],[1766161.96160602,6183810.53990697],[1766412.06319993,6183788.16687353],[1766406.02101097,6183737.62572829],[1766636.54168713,6183711.44489507],[1766649.7992614,6183700.50573277],[1766655.15486025,6183712.71371749],[1766612.65018246,6183576.86420218],[1766605.58899825,6183557.27059596],[1766220.96422897,6183595.27949193],[1766213.52038724,6183601.72249413],[1766156.87781953,6183826.16813757],[1766216.17120276,6183820.31406724]]]]}\",\n    \"area\": 7.09,\n    \"utm\": \"33UWP\",\n    \"regions\": \"Austria,ProdMapAustia,Europe\"\n  }\n}"
												}
											]
										},
										{
											"name": "/owner/:ownerId/polygon/:polygonId",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/owner/:ownerId/polygon/:polygonId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"owner",
														":ownerId",
														"polygon",
														":polygonId"
													],
													"variable": [
														{
															"key": "ownerId",
															"value": "<string>",
															"description": "(Required) User's login. Must match user name passed in the authentication data."
														},
														{
															"key": "polygonId",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												},
												"description": "Deletes a given field"
											},
											"response": [
												{
													"name": "Deleted",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/owner/:ownerId/polygon/:polygonId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"owner",
																":ownerId",
																"polygon",
																":polygonId"
															],
															"variable": [
																{
																	"key": "ownerId",
																	"value": "<string>",
																	"description": "(Required) User's login. Must match user name passed in the authentication data."
																},
																{
																	"key": "polygonId",
																	"value": "<integer>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "/owner/:ownerId/polygon/:polygonId",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "geometry",
															"value": "<string>"
														},
														{
															"key": "srid",
															"value": "<integer>"
														},
														{
															"key": "plantingDate",
															"value": "<string>"
														},
														{
															"key": "crop",
															"value": "<string>"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/owner/:ownerId/polygon/:polygonId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"owner",
														":ownerId",
														"polygon",
														":polygonId"
													],
													"variable": [
														{
															"key": "ownerId",
															"value": "<string>",
															"description": "(Required) User's login. Must match user name passed in the authentication data."
														},
														{
															"key": "polygonId",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												},
												"description": "Updates information about a given field."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PATCH",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "name",
																	"value": "<string>"
																},
																{
																	"key": "geometry",
																	"value": "<string>"
																},
																{
																	"key": "srid",
																	"value": "<integer>"
																},
																{
																	"key": "plantingDate",
																	"value": "<string>"
																},
																{
																	"key": "crop",
																	"value": "<string>"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/owner/:ownerId/polygon/:polygonId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"owner",
																":ownerId",
																"polygon",
																":polygonId"
															],
															"variable": [
																{
																	"key": "ownerId",
																	"value": "<string>",
																	"description": "(Required) User's login. Must match user name passed in the authentication data."
																},
																{
																	"key": "polygonId",
																	"value": "<integer>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"example\": {\n    \"polygonId\": 26193,\n    \"name\": 1,\n    \"payment\": \"2025-01-01\",\n    \"plantingDate\": \"2019-04-30\",\n    \"crop\": \"Äpfel\",\n    \"lng\": 1766398.2283864,\n    \"lat\": 6183832.5001144,\n    \"geometry\": \"{\\\"type\\\":\\\"MultiPolygon\\\",\\\"coordinates\\\":[[[[1766216.17120276,6183820.31406724],[1766306.24730603,6184015.91177969],[1766306.23729084,6184020.37940185],[1766408.21855234,6184216.57060949],[1766538.93719074,6184146.93093963],[1766585.13293664,6184119.46639114],[1766461.37538407,6183884.25154922],[1766423.80078949,6183801.95970166],[1766313.57201698,6183812.8155301],[1766235.0633551,6183817.73899216],[1766214.38204529,6183819.20926239],[1766158.82411059,6183824.64370521],[1766161.19533519,6183813.38241954],[1766161.96160602,6183810.53990697],[1766412.06319993,6183788.16687353],[1766406.02101097,6183737.62572829],[1766636.54168713,6183711.44489507],[1766649.7992614,6183700.50573277],[1766655.15486025,6183712.71371749],[1766612.65018246,6183576.86420218],[1766605.58899825,6183557.27059596],[1766220.96422897,6183595.27949193],[1766213.52038724,6183601.72249413],[1766156.87781953,6183826.16813757],[1766216.17120276,6183820.31406724]]]]}\",\n    \"area\": 7.09,\n    \"utm\": \"33UWP\",\n    \"regions\": \"Austria,ProdMapAustia,Europe\"\n  }\n}"
												}
											]
										},
										{
											"name": "/owner/:ownerId/polygon/:polygonId/swb",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/owner/:ownerId/polygon/:polygonId/swb?minCover=0.7&dateFrom=beginning of the current year&period=7&forecast=3&recent=7&round=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"owner",
														":ownerId",
														"polygon",
														":polygonId",
														"swb"
													],
													"query": [
														{
															"key": "minCover",
															"value": "0.7",
															"description": "Minimal required coverage for the requested region (from 0 - none to 1 - full). Dates with lower coverage are skipped in the response."
														},
														{
															"key": "dateFrom",
															"value": "beginning of the current year",
															"description": "Beginning of the queried time period."
														},
														{
															"key": "period",
															"value": "7",
															"description": "Length of a period (in days) used to report the SWB data."
														},
														{
															"key": "forecast",
															"value": "3",
															"description": "Number of forecast days included in the SWB report."
														},
														{
															"key": "recent",
															"value": "7",
															"description": "Number of days included in the *recent* part of the SWB report."
														},
														{
															"key": "round",
															"value": "0",
															"description": "Number of digits SWB report numbers should be rounded to."
														}
													],
													"variable": [
														{
															"key": "ownerId",
															"value": "<string>",
															"description": "(Required) User's login. Must match user name passed in the authentication data."
														},
														{
															"key": "polygonId",
															"value": "<integer>",
															"description": "(Required) "
														}
													]
												},
												"description": "Returns a soil-water-balance (SWB) data for a given field."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/owner/:ownerId/polygon/:polygonId/swb?minCover=0.7&dateFrom=beginning of the current year&period=7&forecast=3&recent=7&round=0",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"owner",
																":ownerId",
																"polygon",
																":polygonId",
																"swb"
															],
															"query": [
																{
																	"key": "minCover",
																	"value": "0.7"
																},
																{
																	"key": "dateFrom",
																	"value": "beginning of the current year"
																},
																{
																	"key": "period",
																	"value": "7"
																},
																{
																	"key": "forecast",
																	"value": "3"
																},
																{
																	"key": "recent",
																	"value": "7"
																},
																{
																	"key": "round",
																	"value": "0"
																}
															],
															"variable": [
																{
																	"key": "ownerId",
																	"value": "<string>",
																	"description": "(Required) User's login. Must match user name passed in the authentication data."
																},
																{
																	"key": "polygonId",
																	"value": "<integer>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"total\": {\n    \"et\": 83,\n    \"rain\": 198,\n    \"irr\": 62\n  },\n  \"forecast\": {\n    \"swb\": 0,\n    \"rain\": 10\n  },\n  \"recent\": {\n    \"swb\": 0,\n    \"et\": 17,\n    \"rain\": 23,\n    \"irr\": 0\n  },\n  \"periods\": [\n    {\n      \"count\": 7,\n      \"et\": 17,\n      \"rain\": 23,\n      \"irr\": 0,\n      \"kc\": 1,\n      \"lai\": 0,\n      \"fc\": 13,\n      \"ks\": 0,\n      \"dateTo\": \"2019-05-20\",\n      \"dateFrom\": \"2019-05-14\"\n    },\n    {\n      \"count\": 7,\n      \"et\": 9,\n      \"rain\": 10,\n      \"irr\": 0,\n      \"kc\": 0,\n      \"lai\": 0,\n      \"fc\": 13,\n      \"ks\": 0,\n      \"dateTo\": \"2019-05-13\",\n      \"dateFrom\": \"2019-05-07\"\n    }\n  ]\n}"
												}
											]
										}
									]
								},
								{
									"name": "/owner/:ownerId/polygon",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/owner/:ownerId/polygon?srid=<integer>&dateFrom=beginning of the current year",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"owner",
												":ownerId",
												"polygon"
											],
											"query": [
												{
													"key": "srid",
													"value": "<integer>",
													"description": "An EPSG code of returned spatial objects projection, e.g. 4326 (WGS-84) or 3857 (Web Mercator)\n\nIf not provided `srcSrid` parameter value is used and if `srcSrid` parameter isn't provided as well, a default value of `4326` is assumed.\n"
												},
												{
													"key": "dateFrom",
													"value": "beginning of the current year",
													"description": "Beginning of the queried time period."
												}
											],
											"variable": [
												{
													"key": "ownerId",
													"value": "<string>",
													"description": "(Required) User's login. Must match user name passed in the authentication data."
												}
											]
										},
										"description": "Returns information about all user's fields."
									},
									"response": [
										{
											"name": "foo",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/owner/:ownerId/polygon?srid=<integer>&dateFrom=beginning of the current year",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"owner",
														":ownerId",
														"polygon"
													],
													"query": [
														{
															"key": "srid",
															"value": "<integer>"
														},
														{
															"key": "dateFrom",
															"value": "beginning of the current year"
														}
													],
													"variable": [
														{
															"key": "ownerId",
															"value": "<string>",
															"description": "(Required) User's login. Must match user name passed in the authentication data."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"$ref\": \"#/components/schemas/polygon\"\n  }\n]"
										}
									]
								},
								{
									"name": "/owner/:ownerId/polygon",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "geometry",
													"value": "<string>"
												},
												{
													"key": "srid",
													"value": "<integer>"
												},
												{
													"key": "plantingDate",
													"value": "<string>"
												},
												{
													"key": "crop",
													"value": "<string>"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/owner/:ownerId/polygon",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"owner",
												":ownerId",
												"polygon"
											],
											"variable": [
												{
													"key": "ownerId",
													"value": "<string>",
													"description": "(Required) User's login. Must match user name passed in the authentication data."
												}
											]
										},
										"description": "Creates a new field."
									},
									"response": [
										{
											"name": "Created",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "geometry",
															"value": "<string>"
														},
														{
															"key": "srid",
															"value": "<integer>"
														},
														{
															"key": "plantingDate",
															"value": "<string>"
														},
														{
															"key": "crop",
															"value": "<string>"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/owner/:ownerId/polygon",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"owner",
														":ownerId",
														"polygon"
													],
													"variable": [
														{
															"key": "ownerId",
															"value": "<string>",
															"description": "(Required) User's login. Must match user name passed in the authentication data."
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"example\": {\n    \"polygonId\": 26193,\n    \"name\": 1,\n    \"payment\": \"2025-01-01\",\n    \"plantingDate\": \"2019-04-30\",\n    \"crop\": \"Äpfel\",\n    \"lng\": 1766398.2283864,\n    \"lat\": 6183832.5001144,\n    \"geometry\": \"{\\\"type\\\":\\\"MultiPolygon\\\",\\\"coordinates\\\":[[[[1766216.17120276,6183820.31406724],[1766306.24730603,6184015.91177969],[1766306.23729084,6184020.37940185],[1766408.21855234,6184216.57060949],[1766538.93719074,6184146.93093963],[1766585.13293664,6184119.46639114],[1766461.37538407,6183884.25154922],[1766423.80078949,6183801.95970166],[1766313.57201698,6183812.8155301],[1766235.0633551,6183817.73899216],[1766214.38204529,6183819.20926239],[1766158.82411059,6183824.64370521],[1766161.19533519,6183813.38241954],[1766161.96160602,6183810.53990697],[1766412.06319993,6183788.16687353],[1766406.02101097,6183737.62572829],[1766636.54168713,6183711.44489507],[1766649.7992614,6183700.50573277],[1766655.15486025,6183712.71371749],[1766612.65018246,6183576.86420218],[1766605.58899825,6183557.27059596],[1766220.96422897,6183595.27949193],[1766213.52038724,6183601.72249413],[1766156.87781953,6183826.16813757],[1766216.17120276,6183820.31406724]]]]}\",\n    \"area\": 7.09,\n    \"utm\": \"33UWP\",\n    \"regions\": \"Austria,ProdMapAustia,Europe\"\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "/owner/:ownerId",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/owner/:ownerId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"owner",
										":ownerId"
									],
									"variable": [
										{
											"key": "ownerId",
											"value": "<string>",
											"description": "(Required) User's login. Must match user name passed in the authentication data."
										}
									]
								},
								"description": "Fetches user's data."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/owner/:ownerId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"owner",
												":ownerId"
											],
											"variable": [
												{
													"key": "ownerId",
													"value": "<string>",
													"description": "(Required) User's login. Must match user name passed in the authentication data."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"ownerId\": \"demo\",\n    \"pswd\": \"sessionToken\",\n    \"name\": \"demo\",\n    \"language\": \"de\",\n    \"warehouseId\": \"BOKU\",\n    \"areaPayed\": 19999,\n    \"areaUsed\": 186.61\n  }\n}"
								}
							]
						},
						{
							"name": "/owner/:ownerId",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										},
										{
											"key": "password2",
											"value": "<string>"
										},
										{
											"key": "warehouseId",
											"value": "<string>"
										},
										{
											"key": "warehouseCode",
											"value": "<string>"
										},
										{
											"key": "language",
											"value": "<string>"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/owner/:ownerId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"owner",
										":ownerId"
									],
									"variable": [
										{
											"key": "ownerId",
											"value": "<string>",
											"description": "(Required) User's login. Must match user name passed in the authentication data."
										}
									]
								},
								"description": "Updates user's data."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "password",
													"value": "<string>"
												},
												{
													"key": "password2",
													"value": "<string>"
												},
												{
													"key": "warehouseId",
													"value": "<string>"
												},
												{
													"key": "warehouseCode",
													"value": "<string>"
												},
												{
													"key": "language",
													"value": "<string>"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/owner/:ownerId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"owner",
												":ownerId"
											],
											"variable": [
												{
													"key": "ownerId",
													"value": "<string>",
													"description": "(Required) User's login. Must match user name passed in the authentication data."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"example\": {\n    \"ownerId\": \"demo\",\n    \"pswd\": \"sessionToken\",\n    \"name\": \"demo\",\n    \"language\": \"de\",\n    \"warehouseId\": \"BOKU\",\n    \"areaPayed\": 19999,\n    \"areaUsed\": 186.61\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "/owner",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "<string>"
								},
								{
									"key": "password",
									"value": "<string>"
								},
								{
									"key": "password2",
									"value": "<string>"
								},
								{
									"key": "warehouseId",
									"value": "<string>"
								},
								{
									"key": "warehouseCode",
									"value": "<string>"
								},
								{
									"key": "language",
									"value": "<string>"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/owner",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"owner"
							]
						},
						"description": "Registers a new user."
					},
					"response": [
						{
							"name": "Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										},
										{
											"key": "password2",
											"value": "<string>"
										},
										{
											"key": "warehouseId",
											"value": "<string>"
										},
										{
											"key": "warehouseCode",
											"value": "<string>"
										},
										{
											"key": "language",
											"value": "<string>"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/owner",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"owner"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"example\": {\n    \"ownerId\": \"demo\",\n    \"pswd\": \"sessionToken\",\n    \"name\": \"demo\",\n    \"language\": \"de\",\n    \"warehouseId\": \"BOKU\",\n    \"areaPayed\": 19999,\n    \"areaUsed\": 186.61\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "indicator",
			"item": [
				{
					"name": "{indicator Id}",
					"item": [
						{
							"name": "raster Buffer",
							"item": [
								{
									"name": "/indicator/:indicatorId/rasterBuffer",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/indicator/:indicatorId/rasterBuffer?geometry=<string>&srcSrid=4326&bufSize=300&minCover=<float>&dateFrom=<date>&dateTo=<date>&date=<date>&period=14&z=14",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indicator",
												":indicatorId",
												"rasterBuffer"
											],
											"query": [
												{
													"key": "geometry",
													"value": "<string>",
													"description": "(Required) A geoJSON geometry of a requested object, e.g. polygon, area of interest, etc."
												},
												{
													"key": "srcSrid",
													"value": "4326",
													"description": "An EPSG code of request's spatial parameters (like `geometry`), e.g. 4326 (WGS-84) or 3857 (Web Mercator).\n"
												},
												{
													"key": "bufSize",
													"value": "300",
													"description": "Size (in meters) of the buffer around the requested geometry.\n\nNegative values cause bounding box of the buffered geometry to be taken (in such a case the geometry is buffered with the absolute value of the parameter value).\n"
												},
												{
													"key": "minCover",
													"value": "<float>",
													"description": "Minimum coverage provided by an acquisition to be included in the response.\n  \n0 means no coverage and 1 means full coverage only.\n  \nProviding a value will cause coverage statistics to be included in the response.\n\nDefault value varies between indicators. You can check it using the `/indciator` endpoint.\n"
												},
												{
													"key": "dateFrom",
													"value": "<date>",
													"description": "Beginning of the queried time period.\n\nThe default value is `date - period`.\n"
												},
												{
													"key": "dateTo",
													"value": "<date>",
													"description": "End of the queried time period.\n\nThe default value is `date + period`.\n"
												},
												{
													"key": "date",
													"value": "<date>",
													"description": "An alternative way of defining the time period. If `dateFrom` or `dateTo` aren't provided, their default values is `date - period` and `date + period`, respectively.\n\nA value of `now` indicates the current date.\n\nA default value is the current date.\n"
												},
												{
													"key": "period",
													"value": "14",
													"description": "An alternative way of defining the time period. If `dateFrom` or `dateTo` aren't provided, their default values is `date - period` and `date + period`, respectively.\n"
												},
												{
													"key": "z",
													"value": "14",
													"description": "Raster data zoom level.\n  \nThe raster piramids level to be used to fetch the data from - see [here](https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Resolution_and_Scale) for details.\n  \nRange of available values vary between indicators. You can check it using the `/indicator` endpoint.\n\nThe default value is the maximum value available for a given indicator.\n"
												}
											],
											"variable": [
												{
													"key": "indicatorId",
													"value": "<string>",
													"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
												}
											]
										},
										"description": "Returns a list of rasters matching a given search criteria (geometry, time period, coverage) with some basic statistics about raster values.\n\nResults are sorted according to the time difference between their acquisition dates and the `date` parameter. \n\nQueried period is defined either using combination of `date` and `period parameters of using `dateFrom` and `dateTo` parameters (see below).\n"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/indicator/:indicatorId/rasterBuffer?geometry=<string>&srcSrid=4326&bufSize=300&minCover=<float>&dateFrom=<date>&dateTo=<date>&date=<date>&period=14&z=14",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"indicator",
														":indicatorId",
														"rasterBuffer"
													],
													"query": [
														{
															"key": "geometry",
															"value": "<string>"
														},
														{
															"key": "srcSrid",
															"value": "4326"
														},
														{
															"key": "bufSize",
															"value": "300"
														},
														{
															"key": "minCover",
															"value": "<float>"
														},
														{
															"key": "dateFrom",
															"value": "<date>"
														},
														{
															"key": "dateTo",
															"value": "<date>"
														},
														{
															"key": "date",
															"value": "<date>"
														},
														{
															"key": "period",
															"value": "14"
														},
														{
															"key": "z",
															"value": "14"
														}
													],
													"variable": [
														{
															"key": "indicatorId",
															"value": "<string>",
															"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"count\": 190,\n    \"date\": \"2020-08-17\",\n    \"max\": 178,\n    \"mean\": 101.605263157895,\n    \"min\": 22,\n    \"ratio\": 0.430839002267574,\n    \"stddev\": 37.0404753533811,\n    \"sum\": 19305,\n    \"raster\": null\n  },\n  {\n    \"count\": 414,\n    \"date\": \"2020-08-22\",\n    \"max\": 217,\n    \"mean\": 195.62077294686,\n    \"min\": 5,\n    \"ratio\": 0.938775510204082,\n    \"stddev\": 31.0012256790833,\n    \"sum\": 80987,\n    \"raster\": null\n  },\n  {\n    \"count\": 441,\n    \"date\": \"2020-08-07\",\n    \"max\": 226,\n    \"mean\": 210.718820861678,\n    \"min\": 186,\n    \"ratio\": 1,\n    \"stddev\": 6.36050986041706,\n    \"sum\": 92927,\n    \"raster\": null\n  }\n]"
										}
									]
								},
								{
									"name": "/indicator/:indicatorId/rasterBuffer/:dateId",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/indicator/:indicatorId/rasterBuffer/:dateId?geometry=<string>&srcSrid=4326&bufSize=300&srid=<integer>&minCover=<float>&dateFrom=<date>&dateTo=<date>&period=<integer>&rasterFormat=<string>&encode=base64&scale=raw&colorMap=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indicator",
												":indicatorId",
												"rasterBuffer",
												":dateId"
											],
											"query": [
												{
													"key": "geometry",
													"value": "<string>",
													"description": "(Required) A geoJSON geometry of a requested object, e.g. polygon, area of interest, etc."
												},
												{
													"key": "srcSrid",
													"value": "4326",
													"description": "An EPSG code of request's spatial parameters (like `geometry`), e.g. 4326 (WGS-84) or 3857 (Web Mercator).\n"
												},
												{
													"key": "bufSize",
													"value": "300",
													"description": "Size (in meters) of the buffer around the requested geometry.\n\nNegative values cause bounding box of the buffered geometry to be taken (in such a case the geometry is buffered with the absolute value of the parameter value).\n"
												},
												{
													"key": "srid",
													"value": "<integer>",
													"description": "An EPSG code of returned spatial objects projection, e.g. 4326 (WGS-84) or 3857 (Web Mercator)\n\nIf not provided `srcSrid` parameter value is used and if `srcSrid` parameter isn't provided as well, a default value of `4326` is assumed.\n"
												},
												{
													"key": "minCover",
													"value": "<float>",
													"description": "Minimum coverage provided by an acquisition to be included in the response.\n  \n0 means no coverage and 1 means full coverage only.\n  \nProviding a value will cause coverage statistics to be included in the response.\n\nDefault value varies between indicators. You can check it using the `/indciator` endpoint.\n"
												},
												{
													"key": "dateFrom",
													"value": "<date>",
													"description": "Beginning of the queried time period.\n\nThe default value is `date - period`.\n"
												},
												{
													"key": "dateTo",
													"value": "<date>",
													"description": "End of the queried time period.\n\nThe default value is `date + period`.\n"
												},
												{
													"key": "period",
													"value": "<integer>",
													"description": "An alternative way of defining the time period. If `dateFrom` or `dateTo` aren't provided, their default values is `date - period` and `date + period`, respectively.\n\nDefault value is indicator-specific. You can check it using the `/indicator` endpoint.\n"
												},
												{
													"key": "rasterFormat",
													"value": "<string>",
													"description": "Returned raster data format.\n  \nIt doesn't determine the response format (this is determined by the `format` parameter) and is affected by the `encode` parameter.\n"
												},
												{
													"key": "encode",
													"value": "base64",
													"description": "Determines the way raster image data are encoded so they can be send as a part of a JSON response.\n"
												},
												{
													"key": "scale",
													"value": "raw",
													"description": "Determines the way raster values are scaled.\n  \n* raw - use values as they are stored in the database (e.g. 0-80 for LAI)\n* real - rescale values to indicator's phisical values range (e.g. 0-8 fro LAI)\n* stdfloat - standardize to mean 0 and standard deviation 1 within the scene\n* stdbyte - standardize to mean 127 and standard deviation 25 within the scene\n* stretch - transform in a way the minimum value within the scene equals 0 and maximum equals 254\n* grayscale - transform in a way minimum phisical value of the indicator corresponds to 0 and maximum to 254\n"
												},
												{
													"key": "colorMap",
													"value": "<string>",
													"description": "Determines if a color map should be used.\n  \n* `0` indicates no color map should be used. This value is automatically enforced when `rasterFormat` is other than `image/png`, `image/jpeg` or `image/tiff`.\n* `1` indicates a default color map for a given `indicatorId` should be used. Takes effect only when `scale` equals to `raw`.\n* `mapName` indicates name of the color map to be used. There are a few general-use color maps available: `viridis1`, `viridis2`, `plasma1`, `plasma2` (see [here](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html#the-color-scales)), `bw` (black-white), `wb` (white-black) and `ndvi`. They are meant to work with values in `0-254` scale. If the indicator you are using is on a different scale, use `scale=grayscale` parameter to map it to `0-254`. The difference between `viridis1`/`viridis2` and `plasma1`/`plasma2` is the scale direction.\n* `postgisColorMapDef` explicitely provided color map. This allows you to apply any color map of your choice. It just has to follow the the format used by the Postgis [ST_ColorMap()](https://postgis.net/docs/RT_ST_ColorMap.html) function. Remember the map is applied to the already values transformed according to the `scale` request parameter.\n"
												}
											],
											"variable": [
												{
													"key": "indicatorId",
													"value": "<string>",
													"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
												},
												{
													"key": "dateId",
													"value": "<string>",
													"description": "(Required) Requested date. A special value of `now` indicates the current date."
												}
											]
										},
										"description": "Returns a raster image for a given indicator.\n\nThe image acquired at date closest to the `dateId` parameter within the queried period (see `dateFrom`, `dateTo` and `period` parameters) which passes the `minCover` condition is returned.\nIf there is no such image, 404 is returned.\n\nReturned data include encoded image, its envelope, actual aquisition, the coverage ratio and some basic pixel value statistics.\n\nData can be scalled and colored according to the `scale` and `colorMap` parameter values.\n"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/indicator/:indicatorId/rasterBuffer/:dateId?geometry=<string>&srcSrid=4326&bufSize=300&srid=<integer>&minCover=<float>&dateFrom=<date>&dateTo=<date>&period=<integer>&rasterFormat=<string>&encode=base64&scale=raw&colorMap=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"indicator",
														":indicatorId",
														"rasterBuffer",
														":dateId"
													],
													"query": [
														{
															"key": "geometry",
															"value": "<string>"
														},
														{
															"key": "srcSrid",
															"value": "4326"
														},
														{
															"key": "bufSize",
															"value": "300"
														},
														{
															"key": "srid",
															"value": "<integer>"
														},
														{
															"key": "minCover",
															"value": "<float>"
														},
														{
															"key": "dateFrom",
															"value": "<date>"
														},
														{
															"key": "dateTo",
															"value": "<date>"
														},
														{
															"key": "period",
															"value": "<integer>"
														},
														{
															"key": "rasterFormat",
															"value": "<string>"
														},
														{
															"key": "encode",
															"value": "base64"
														},
														{
															"key": "scale",
															"value": "raw"
														},
														{
															"key": "colorMap",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "indicatorId",
															"value": "<string>",
															"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
														},
														{
															"key": "dateId",
															"value": "<string>",
															"description": "(Required) Requested date. A special value of `now` indicates the current date."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"date\": \"2020-08-20\",\n  \"raster\": \"iVBORw0KGgoAAAANSUhEUgAAAA0AAAAJCAYAAADpeqZqAAAAlElEQVQYlZWQMQ7CQAwEZyWn4LEUvIA+LQ1FJMSreEKUhiJNiotkCnyJOaXBkouzZnd9Fk35A+cFzMAKGlDL6AcGmID3LuKU4NuXl99xxmSzRFuadUnYI2MESnIs0bWseQPGHILqltZhjdRuo/ELLgC/xn/yeiVENS1MNCDbVqpA2QEspQF6xiFqgJ8j7UB0dPa/6wMUxzHuhKNJpQAAAABJRU5ErkJggg==\",\n  \"envelope\": [\n    16.853542327868595,\n    48.224672649560645,\n    16.854486465441845,\n    48.22530164090307\n  ],\n  \"count\": 84,\n  \"sum\": 4663,\n  \"mean\": 55.51190476190476,\n  \"stddev\": 3.455478905610648,\n  \"min\": 51,\n  \"max\": 70,\n  \"cover\": 1\n}"
										},
										{
											"name": "No data available for the requested region.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/indicator/:indicatorId/rasterBuffer/:dateId?geometry=<string>&srcSrid=4326&bufSize=300&srid=<integer>&minCover=<float>&dateFrom=<date>&dateTo=<date>&period=<integer>&rasterFormat=<string>&encode=base64&scale=raw&colorMap=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"indicator",
														":indicatorId",
														"rasterBuffer",
														":dateId"
													],
													"query": [
														{
															"key": "geometry",
															"value": "<string>"
														},
														{
															"key": "srcSrid",
															"value": "4326"
														},
														{
															"key": "bufSize",
															"value": "300"
														},
														{
															"key": "srid",
															"value": "<integer>"
														},
														{
															"key": "minCover",
															"value": "<float>"
														},
														{
															"key": "dateFrom",
															"value": "<date>"
														},
														{
															"key": "dateTo",
															"value": "<date>"
														},
														{
															"key": "period",
															"value": "<integer>"
														},
														{
															"key": "rasterFormat",
															"value": "<string>"
														},
														{
															"key": "encode",
															"value": "base64"
														},
														{
															"key": "scale",
															"value": "raw"
														},
														{
															"key": "colorMap",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "indicatorId",
															"value": "<string>",
															"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
														},
														{
															"key": "dateId",
															"value": "<string>",
															"description": "(Required) Requested date. A special value of `now` indicates the current date."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/indicator/:indicatorId/timeseries",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/indicator/:indicatorId/timeseries?geometry=<string>&srcSrid=4326&buffer=0&z=14&scale=real&dateFrom=<date>&dateTo=<date>&date=<date>&period=<integer>&minCover=<float>&srid=<integer>&format=application/json&position=center",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"indicator",
										":indicatorId",
										"timeseries"
									],
									"query": [
										{
											"key": "geometry",
											"value": "<string>",
											"description": "(Required) A geoJSON geometry of a requested object, e.g. polygon, area of interest, etc."
										},
										{
											"key": "srcSrid",
											"value": "4326",
											"description": "An EPSG code of request's spatial parameters (like `geometry`), e.g. 4326 (WGS-84) or 3857 (Web Mercator).\n"
										},
										{
											"key": "buffer",
											"value": "0",
											"description": "A buffer size (in meters) to be applied to the `geometry`.\n  \nUsefeul when `geometry` is a point or to assure returned raster data contains also pixels which centroids don't intersect th `geometry`.\n\nWhen negative number is provided, the final `geometry` will be a bounding box of original `geometry` with a positive buffer value applied.\n"
										},
										{
											"key": "z",
											"value": "14",
											"description": "Raster data zoom level.\n  \nThe raster piramids level to be used to fetch the data from - see [here](https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Resolution_and_Scale) for details.\n  \nRange of available values vary between indicators. You can check it using the `/indicator` endpoint.\n\nThe default value is the maximum value available for a given indicator.\n"
										},
										{
											"key": "scale",
											"value": "real",
											"description": "Determines the way values are scaled.\n\n* raw - use values as they are stored in the database (e.g. 0-80 for LAI)\n* real - rescale values to indicator's phisical values range (e.g. 0-8 fro LAI)\n* stdfloat - standardize to mean 0 and standard deviation 1 within the scene\n* stdbyte - standardize to mean 127 and standard deviation 25 within the scene\n*  stretch - transform in a way theminimum value within the scene equals 0 and maximum equals 254\n* grayscale - transform in a way minimum phisical value of the indicator corresponds to 0 and maximum to 254\n"
										},
										{
											"key": "dateFrom",
											"value": "<date>",
											"description": "Beginning of the queried time period.\n\nThe default value is `date - period`.\n"
										},
										{
											"key": "dateTo",
											"value": "<date>",
											"description": "End of the queried time period.\n\nThe default value is `date + period`.\n"
										},
										{
											"key": "date",
											"value": "<date>",
											"description": "An alternative way of defining the time period. If `dateFrom` or `dateTo` aren't provided, their default values is `date - period` and `date + period`, respectively.\n\nA value of `now` indicates the current date.\n\nA default value is the current date.\n"
										},
										{
											"key": "period",
											"value": "<integer>",
											"description": "An alternative way of defining the time period. If `dateFrom` or `dateTo` aren't provided, their default values is `date - period` and `date + period`, respectively.\n\nDefault value is indicator-specific. You can check it using the `/indicator` endpoint.\n"
										},
										{
											"key": "minCover",
											"value": "<float>",
											"description": "Minimum coverage provided by an acquisition to be included in the response.\n  \n0 means no coverage and 1 means full coverage only.\n  \nProviding a value will cause coverage statistics to be included in the response.\n\nDefault value varies between indicators. You can check it using the `/indciator` endpoint.\n"
										},
										{
											"key": "srid",
											"value": "<integer>",
											"description": "An EPSG code of returned spatial objects projection, e.g. 4326 (WGS-84) or 3857 (Web Mercator)\n\nIf not provided `srcSrid` parameter value is used and if `srcSrid` parameter isn't provided as well, a default value of `4326` is assumed.\n"
										},
										{
											"key": "format",
											"value": "application/json",
											"description": "Requested return format."
										},
										{
											"key": "position",
											"value": "center",
											"description": "The position within a pixel being used as a pixel's vector representation.\n\n* `corner` indicates upper-left corner\n* `center` indicates center\n* `polygon` indicates a polygon covering whole pixel area\n"
										}
									],
									"variable": [
										{
											"key": "indicatorId",
											"value": "<string>",
											"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
										}
									]
								},
								"description": "Returns a timeseries of a given indicator value for a given area and time period."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/indicator/:indicatorId/timeseries?geometry=<string>&srcSrid=4326&buffer=0&z=14&scale=real&dateFrom=<date>&dateTo=<date>&date=<date>&period=<integer>&minCover=<float>&srid=<integer>&format=application/json&position=center",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indicator",
												":indicatorId",
												"timeseries"
											],
											"query": [
												{
													"key": "geometry",
													"value": "<string>"
												},
												{
													"key": "srcSrid",
													"value": "4326"
												},
												{
													"key": "buffer",
													"value": "0"
												},
												{
													"key": "z",
													"value": "14"
												},
												{
													"key": "scale",
													"value": "real"
												},
												{
													"key": "dateFrom",
													"value": "<date>"
												},
												{
													"key": "dateTo",
													"value": "<date>"
												},
												{
													"key": "date",
													"value": "<date>"
												},
												{
													"key": "period",
													"value": "<integer>"
												},
												{
													"key": "minCover",
													"value": "<float>"
												},
												{
													"key": "srid",
													"value": "<integer>"
												},
												{
													"key": "format",
													"value": "application/json"
												},
												{
													"key": "position",
													"value": "center"
												}
											],
											"variable": [
												{
													"key": "indicatorId",
													"value": "<string>",
													"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"date\": \"2020-11-21T00:00:00.000Z\",\n    \"raster\": [\n      {\n        \"x\": 16.075008546200294,\n        \"y\": \"48.387001703092714,\",\n        \"value\": 0.8149606585502625\n      }\n    ],\n    \"count\": 1,\n    \"sum\": \"0.8149606585502625,\",\n    \"mean\": \"0.8149606585502625,\",\n    \"stddev\": \"0,\",\n    \"min\": \"0.8149606585502625,\",\n    \"max\": \"0.8149606585502625,\",\n    \"cover\": 1\n  },\n  {\n    \"date\": \"2020-11-18T00:00:00.000Z\",\n    \"raster\": [\n      {\n        \"x\": \"16.075008546200294,\",\n        \"y\": \"48.387001703092714,\",\n        \"value\": 0.7795276045799255\n      }\n    ],\n    \"count\": 1,\n    \"sum\": 0.7795276045799255,\n    \"mean\": 0.7795276045799255,\n    \"stddev\": 0,\n    \"min\": 0.7795276045799255,\n    \"max\": 0.7795276045799255,\n    \"cover\": 1\n  }\n]"
								}
							]
						},
						{
							"name": "/indicator/:indicatorId/legend",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/png"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/indicator/:indicatorId/legend?height=<integer>&background=transparent&fontSize=16&fontColor=white&width=50&colormap=254 254 254 254 255\n0 0 0 0 255\n&type=continuous&labels=<string>&date=<date>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"indicator",
										":indicatorId",
										"legend"
									],
									"query": [
										{
											"key": "height",
											"value": "<integer>",
											"description": "Returned legend height in pixels. If it's not provided, the legend width will be determined automatically based on the number of labels."
										},
										{
											"key": "background",
											"value": "transparent",
											"description": "Legend background color in any format understood by the Imagick library (`white`,  `rgb(100, 50, 20)`, `rgba(100, 50, 20, 0.8)`, etc.)."
										},
										{
											"key": "fontSize",
											"value": "16",
											"description": "Label font size in points (assuming that the legend has 72 dpi resolution)."
										},
										{
											"key": "fontColor",
											"value": "white",
											"description": "Label font color in any format understood by the Imagick library (`white`,  `rgb(100, 50, 20)`, `rgba(100, 50, 20, 0.8)`, etc.)."
										},
										{
											"key": "width",
											"value": "50",
											"description": "Width of the color bars in the returned legend. The total legend width depends on the labels length and can't be explicitely requested."
										},
										{
											"key": "colormap",
											"value": "254 254 254 254 255\n0 0 0 0 255\n",
											"description": "Sets the color map to be used by the legend.\n\nThe color map can be one of predefined map names (see also the `colormap` parameter of the `/indicator/{indicatorId}/rasterData` endpoint) or an explicit color map in the Postgis ST_ColorMap() function format.\n\nNormally the colormap is determined by indicator settings (see the `/indicator` endpoint) but this parameter allows to manually enforce it.\n"
										},
										{
											"key": "type",
											"value": "continuous",
											"description": "Legend type. Discrete legends are displayed as rectangles while continuous ones as a gradient.\n\nNormally the legend type is determined by indicator settings (see the /indicator endpoint) but this parameter allows to manually enforce it.\n"
										},
										{
											"key": "labels",
											"value": "<string>",
											"description": "Sets the set of labels to be displayed on the legend.\n\nEvery label is described in a single line starting with the corresponding `colormap` value followed by a space and a label (e.g. `10 foo` means \"display label \"foo\" next to the colormap value 10\").\n\nNormally labels are determined by indicator settings (see the `/indicator` endpoint) but this parameter allows to manually enforce them.\n"
										},
										{
											"key": "date",
											"value": "<date>",
											"description": "For the `class` indicator only - identifier of the classification."
										}
									],
									"variable": [
										{
											"key": "indicatorId",
											"value": "<string>",
											"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
										}
									]
								},
								"description": "Returns a PNG legend for a given indicator."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/indicator/:indicatorId/legend?height=<integer>&background=transparent&fontSize=16&fontColor=white&width=50&colormap=254 254 254 254 255\n0 0 0 0 255\n&type=continuous&labels=<string>&date=<date>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indicator",
												":indicatorId",
												"legend"
											],
											"query": [
												{
													"key": "height",
													"value": "<integer>"
												},
												{
													"key": "background",
													"value": "transparent"
												},
												{
													"key": "fontSize",
													"value": "16"
												},
												{
													"key": "fontColor",
													"value": "white"
												},
												{
													"key": "width",
													"value": "50"
												},
												{
													"key": "colormap",
													"value": "254 254 254 254 255\n0 0 0 0 255\n"
												},
												{
													"key": "type",
													"value": "continuous"
												},
												{
													"key": "labels",
													"value": "<string>"
												},
												{
													"key": "date",
													"value": "<date>"
												}
											],
											"variable": [
												{
													"key": "indicatorId",
													"value": "<string>",
													"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/png"
										}
									],
									"cookie": [],
									"body": "officia veniam"
								}
							]
						},
						{
							"name": "/indicator/:indicatorId/xyz",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/indicator/:indicatorId/xyz?srcSrid=4326&geometry=<string>&dateFrom=1900-01-01&dateTo=<date>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"indicator",
										":indicatorId",
										"xyz"
									],
									"query": [
										{
											"key": "srcSrid",
											"value": "4326",
											"description": "An EPSG code of request's spatial parameters (like `geometry`), e.g. 4326 (WGS-84) or 3857 (Web Mercator).\n"
										},
										{
											"key": "geometry",
											"value": "<string>",
											"description": "(Required) A geoJSON geometry of a requested object, e.g. polygon, area of interest, etc."
										},
										{
											"key": "dateFrom",
											"value": "1900-01-01",
											"description": "Beginning of the queried time period."
										},
										{
											"key": "dateTo",
											"value": "<date>",
											"description": "Ending of the queried time period."
										}
									],
									"variable": [
										{
											"key": "indicatorId",
											"value": "<string>",
											"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
										}
									]
								},
								"description": "Returns list of dates matching given search criteria. Tile images forparticular date can be fetched using the `/type/{indicatorId}/date/{dateId}/xyz/{xyzId}` endpoint."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/indicator/:indicatorId/xyz?srcSrid=4326&geometry=<string>&dateFrom=1900-01-01&dateTo=<date>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indicator",
												":indicatorId",
												"xyz"
											],
											"query": [
												{
													"key": "srcSrid",
													"value": "4326"
												},
												{
													"key": "geometry",
													"value": "<string>"
												},
												{
													"key": "dateFrom",
													"value": "1900-01-01"
												},
												{
													"key": "dateTo",
													"value": "<date>"
												}
											],
											"variable": [
												{
													"key": "indicatorId",
													"value": "<string>",
													"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"date\": \"2019-05-18\",\n    \"utms\": [\n      \"33UXQ\",\n      \"33UWP\",\n      \"34TCT\",\n      \"34UCU\",\n      \"33UXP\",\n      \"33TYN\",\n      \"33UYP\"\n    ],\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [\n        [\n          [\n            2122101.142872,\n            5917144.562824\n          ],\n          [\n            2121641.499588,\n            5908460.6658\n          ],\n          [\n            1961693.84703,\n            5915290.039172\n          ],\n          [\n            1966690.305945,\n            6062616.858022\n          ],\n          [\n            1825590.751094,\n            6066396.384054\n          ],\n          [\n            1669762.65032,\n            6067875.459373\n          ],\n          [\n            1669762.072323,\n            6233056.307958\n          ],\n          [\n            1821215.658375,\n            6231568.239464\n          ],\n          [\n            1821217.954931,\n            6231700.790982\n          ],\n          [\n            1821224.638154,\n            6231700.605626\n          ],\n          [\n            1823989.196536,\n            6384924.737593\n          ],\n          [\n            1993127.922835,\n            6380084.518902\n          ],\n          [\n            1987333.280027,\n            6226961.597781\n          ],\n          [\n            2035090.639473,\n            6224783.114995\n          ],\n          [\n            2034991.703687,\n            6227638.480996\n          ],\n          [\n            2201119.675215,\n            6231953.400282\n          ],\n          [\n            2203491.825389,\n            6081500.147341\n          ],\n          [\n            2203497.517945,\n            6081500.290654\n          ],\n          [\n            2203611.114117,\n            6074003.625334\n          ],\n          [\n            2203725.357033,\n            6066830.313913\n          ],\n          [\n            2203719.905263,\n            6066830.177086\n          ],\n          [\n            2205979.216567,\n            5919184.499625\n          ],\n          [\n            2122101.142872,\n            5917144.562824\n          ]\n        ]\n      ]\n    }\n  },\n  {\n    \"date\": \"2019-05-17\",\n    \"utms\": [\n      \"32TQT\"\n    ],\n    \"geometry\": {\n      \"type\": \"Polygon\",\n      \"coordinates\": [\n        [\n          [\n            1299269.825719,\n            6077393.629407\n          ],\n          [\n            1293776.90227,\n            5915290.039172\n          ],\n          [\n            1453724.554828,\n            5908460.6658\n          ],\n          [\n            1462210.284903,\n            6070192.765193\n          ],\n          [\n            1299269.825719,\n            6077393.629407\n          ]\n        ]\n      ]\n    }\n  }\n]"
								}
							]
						},
						{
							"name": "/indicator/:indicatorId/date/:dateId/xyz/:xyzId",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "image/png"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/indicator/:indicatorId/date/:dateId/xyz/:xyzId?scale=raw&colorMap=<string>&geometry=<string>&srcSrid=4326&buffer=0&srid=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"indicator",
										":indicatorId",
										"date",
										":dateId",
										"xyz",
										":xyzId"
									],
									"query": [
										{
											"key": "scale",
											"value": "raw",
											"description": "Determines the way raster values are scaled.\n  \n* raw - use values as they are stored in the database (e.g. 0-80 for LAI)\n* real - rescale values to indicator's phisical values range (e.g. 0-8 fro LAI)\n* stdfloat - standardize to mean 0 and standard deviation 1 within the scene\n* stdbyte - standardize to mean 127 and standard deviation 25 within the scene\n* stretch - transform in a way the minimum value within the scene equals 0 and maximum equals 254\n* grayscale - transform in a way minimum phisical value of the indicator corresponds to 0 and maximum to 254\n"
										},
										{
											"key": "colorMap",
											"value": "<string>",
											"description": "Determines if a color map should be used.\n  \n* `0` indicates no color map should be used. This value is automatically enforced when `rasterFormat` is other than `image/png`, `image/jpeg` or `image/tiff`.\n* `1` indicates a default color map for a given `indicatorId` should be used. Takes effect only when `scale` equals to `raw`.\n* `mapName` indicates name of the color map to be used. There are a few general-use color maps available: `viridis1`, `viridis2`, `plasma1`, `plasma2` (see [here](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html#the-color-scales)), `bw` (black-white), `wb` (white-black) and `ndvi`. They are meant to work with values in `0-254` scale. If the indicator you are using is on a different scale, use `scale=grayscale` parameter to map it to `0-254`. The difference between `viridis1`/`viridis2` and `plasma1`/`plasma2` is the scale direction.\n* `postgisColorMapDef` explicitely provided color map. This allows you to apply any color map of your choice. It just has to follow the the format used by the Postgis [ST_ColorMap()](https://postgis.net/docs/RT_ST_ColorMap.html) function. Remember the map is applied to the already values transformed according to the `scale` request parameter.\n"
										},
										{
											"key": "geometry",
											"value": "<string>",
											"description": "(Required) A geoJSON geometry of a requested object, e.g. polygon, area of interest, etc."
										},
										{
											"key": "srcSrid",
											"value": "4326",
											"description": "An EPSG code of request's spatial parameters (like `geometry`), e.g. 4326 (WGS-84) or 3857 (Web Mercator).\n"
										},
										{
											"key": "buffer",
											"value": "0",
											"description": "A buffer size (in meters) to be applied to the `geometry`.\n  \nUsefeul when `geometry` is a point or to assure returned raster data contains also pixels which centroids don't intersect th `geometry`.\n\nWhen negative number is provided, the final `geometry` will be a bounding box of original `geometry` with a positive buffer value applied.\n"
										},
										{
											"key": "srid",
											"value": "<integer>",
											"description": "An EPSG code of returned spatial objects projection, e.g. 4326 (WGS-84) or 3857 (Web Mercator)\n\nIf not provided `srcSrid` parameter value is used and if `srcSrid` parameter isn't provided as well, a default value of `4326` is assumed.\n"
										}
									],
									"variable": [
										{
											"key": "indicatorId",
											"value": "<string>",
											"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
										},
										{
											"key": "dateId",
											"value": "<string>",
											"description": "(Required) Requested date. A special value of `now` indicates the current date."
										},
										{
											"key": "xyzId",
											"value": "<string>",
											"description": "(Required) An x_y_z string, e.g. `113_79_7` for the tile with x coordinate of 113 and y coordinate of 79 at zoom level 7.\n\n(See https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames for a detailed tile naming description).\n"
										}
									]
								},
								"description": "Returns a given XYZ tile image."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/indicator/:indicatorId/date/:dateId/xyz/:xyzId?scale=raw&colorMap=<string>&geometry=<string>&srcSrid=4326&buffer=0&srid=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indicator",
												":indicatorId",
												"date",
												":dateId",
												"xyz",
												":xyzId"
											],
											"query": [
												{
													"key": "scale",
													"value": "raw"
												},
												{
													"key": "colorMap",
													"value": "<string>"
												},
												{
													"key": "geometry",
													"value": "<string>"
												},
												{
													"key": "srcSrid",
													"value": "4326"
												},
												{
													"key": "buffer",
													"value": "0"
												},
												{
													"key": "srid",
													"value": "<integer>"
												}
											],
											"variable": [
												{
													"key": "indicatorId",
													"value": "<string>",
													"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
												},
												{
													"key": "dateId",
													"value": "<string>",
													"description": "(Required) Requested date. A special value of `now` indicates the current date."
												},
												{
													"key": "xyzId",
													"value": "<string>",
													"description": "(Required) An x_y_z string, e.g. `113_79_7` for the tile with x coordinate of 113 and y coordinate of 79 at zoom level 7.\n\n(See https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames for a detailed tile naming description).\n"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "image/png"
										}
									],
									"cookie": [],
									"body": "officia veniam"
								}
							]
						},
						{
							"name": "/indicator/:indicatorId/segmentation",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/indicator/:indicatorId/segmentation?geometry=<string>&srcSrid=4326&srid=<integer>&polygonId=<integer>&dateFrom=<date>&dateTo=<date>&minCover=0.7&rgb=0&scale=raw&minSize=25&spatialR=4&rangeR=4&simplifyR=2&blur=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"indicator",
										":indicatorId",
										"segmentation"
									],
									"query": [
										{
											"key": "geometry",
											"value": "<string>",
											"description": "(Required) A geoJSON geometry of a requested object, e.g. polygon, area of interest, etc."
										},
										{
											"key": "srcSrid",
											"value": "4326",
											"description": "An EPSG code of request's spatial parameters (like `geometry`), e.g. 4326 (WGS-84) or 3857 (Web Mercator).\n"
										},
										{
											"key": "srid",
											"value": "<integer>",
											"description": "An EPSG code of returned spatial objects projection, e.g. 4326 (WGS-84) or 3857 (Web Mercator)\n\nIf not provided `srcSrid` parameter value is used and if `srcSrid` parameter isn't provided as well, a default value of `4326` is assumed.\n"
										},
										{
											"key": "polygonId",
											"value": "<integer>",
											"description": "Defines the queried area as a registered polygon with a given id.\n  \nIf this parameter is used:\n  \n* `ownerId` must be provided as well.\n* authorization is performed against the polygon's owner account (instead of API users accounts)\n"
										},
										{
											"key": "dateFrom",
											"value": "<date>",
											"description": "Beginning of the time period used for the segmentation (see the endpoint description for details). If not provided, `today - 14 days` is assumed."
										},
										{
											"key": "dateTo",
											"value": "<date>",
											"description": "End of the time period used for the segmentation (see the endpoint description for details). If not provided, today is assumed."
										},
										{
											"key": "minCover",
											"value": "0.7",
											"description": "Minimal required coverage for the requested region (from 0 - none to 1 - full). Dates with lower coverage are skipped in the response."
										},
										{
											"key": "rgb",
											"value": "0",
											"description": "Should B04 (visible red), B08 (NIR) and B11 (SWIR) bands be included in the segmentation (see the endpoint description for details).\n\nAlways `0` if `dateFrom` isn't equal `dateTo` or `scale` isn't equal `raw`.\n"
										},
										{
											"key": "scale",
											"value": "raw",
											"description": "Determines the way raster values are scaled.\n  \n* raw - use values as they are stored in the database (e.g. 0-80 for LAI)\n* real - rescale values to indicator's phisical values range (e.g. 0-8 fro LAI)\n* stdfloat - standardize to mean 0 and standard deviation 1 within the scene\n* stdbyte - standardize to mean 127 and standard deviation 25 within the scene\n* stretch - transform in a way the minimum value within the scene equals 0 and maximum equals 254\n* grayscale - transform in a way minimum phisical value of the indicator corresponds to 0 and maximum to 254\n"
										},
										{
											"key": "minSize",
											"value": "25",
											"description": "Minimum segment size in pixels (one pixel is around 100 squere meters)"
										},
										{
											"key": "spatialR",
											"value": "4",
											"description": "Spatial radius parameter of the mean shift segmentation algorithm."
										},
										{
											"key": "rangeR",
											"value": "4",
											"description": "Range radius parameter of the mean shift segmentation algorithm."
										},
										{
											"key": "simplifyR",
											"value": "2",
											"description": "Radius of the simplification window function (value of `0` turns off the simplification step."
										},
										{
											"key": "blur",
											"value": "0",
											"description": "Radius of the blur window (value of `0` turns off the blur step)"
										}
									],
									"variable": [
										{
											"key": "indicatorId",
											"value": "<string>",
											"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
										}
									]
								},
								"description": "Performs a segmentation of a given area using a given indicator.\n\nThe segmenation is performed in following steps:\n\n* A set of images is gathered based on the `indicatorId`, `dateFrom`, `dateTo`, `rgb` and `minCover` parameter values. All images being used have to provide at least `minCover` area of the requested `geometry`. If there is no such image, an error is returned.\n  * If `dateFrom` differs from `dateTo` all acquisitions of the `indicatorId` indicator within a given time period.\n  * If `dateFrom` equals `dateTo` and `rgb` equals `1`, `indicatorId` indicator, B04 (visible red), B08 (NIR) and B11 (SWIR) bands from from a given date are used.\n  * If `dateFrom` equals `dateTo` and `rgb` equals `0`, `indicatorId` from a given date is used.\n* If `scale` isn't `raw` a corresponding transformation (see `scale` parameter description below) is applied to all images selected in the previous point. The transformation is applied separately for every image.\n* If `blur . 0`, a mean filter with a window size of `2 * blur + 1` is applied to all selected images.\n* A mean shift segmentation is performed using `spatialR` and `rangeR` parameters.\n* If `simplifyR > 0`, a transformation marking a given pixel as belonging to the segment with the highest pixel count in the window of size `2 * simplifyR + 1` is applied.\n* If `minSize > 0`, every segment with an area lower than `minSize` pixels is merged with an adjacent segment having closest mean value of the `indicatorId` indicator. This procedure is repeated until there is no segment with size lower than `minSize`.\n* `polygonId` may be provided instead of the `geometry` parameter. In such a case given polygon's geometry will be used as the segmentation area.\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/indicator/:indicatorId/segmentation?geometry=<string>&srcSrid=4326&srid=<integer>&polygonId=<integer>&dateFrom=<date>&dateTo=<date>&minCover=0.7&rgb=0&scale=raw&minSize=25&spatialR=4&rangeR=4&simplifyR=2&blur=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indicator",
												":indicatorId",
												"segmentation"
											],
											"query": [
												{
													"key": "geometry",
													"value": "<string>"
												},
												{
													"key": "srcSrid",
													"value": "4326"
												},
												{
													"key": "srid",
													"value": "<integer>"
												},
												{
													"key": "polygonId",
													"value": "<integer>"
												},
												{
													"key": "dateFrom",
													"value": "<date>"
												},
												{
													"key": "dateTo",
													"value": "<date>"
												},
												{
													"key": "minCover",
													"value": "0.7"
												},
												{
													"key": "rgb",
													"value": "0"
												},
												{
													"key": "scale",
													"value": "raw"
												},
												{
													"key": "minSize",
													"value": "25"
												},
												{
													"key": "spatialR",
													"value": "4"
												},
												{
													"key": "rangeR",
													"value": "4"
												},
												{
													"key": "simplifyR",
													"value": "2"
												},
												{
													"key": "blur",
													"value": "0"
												}
											],
											"variable": [
												{
													"key": "indicatorId",
													"value": "<string>",
													"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": 4807,\n  \"img\": null,\n  \"log\": {\n    \"time\": {\n      \"getRast\": 0.13103985786438,\n      \"segFetch\": 0.0382168292999268,\n      \"segSeg\": 0.14893102645874,\n      \"segUpdateDb\": 1.08131504058838,\n      \"segmentStats\": 0.0848128795623779,\n      \"stats\": 0.957422018051147\n    }\n  },\n  \"segments\": [\n    {\n      \"area\": 0.254556947687455,\n      \"geojson\": \"{\\\"type\\\":\\\"Polygon\\\",\\\"crs\\\":{\\\"type\\\":\\\"name\\\",\\\"properties\\\":{\\\"name\\\":\\\"EPSG:3857\\\"}},\\\"coordinates\\\":[[[15653720.6,-4082358.36],[15653730.1,-4082358.36],[15653797,-4082358.36],[15653797,-4082367.92],[15653816.1,-4082367.92],[15653816.1,-4082358.36],[15653825.7,-4082358.36],[15653825.7,-4082339.25],[15653835.2,-4082339.25],[15653835.2,-4082329.7],[15653844.8,-4082329.7],[15653844.8,-4082339.25],[15653863.9,-4082339.25],[15653863.9,-4082378],[15653854.6,-4082377.16],[15653723.6,-4082365.2],[15653720.6,-4082364.92],[15653675.1,-4082360.78],[15653634.6,-4082357.08],[15653634.6,-4082339.25],[15653653.7,-4082339.25],[15653653.7,-4082348.81],[15653720.6,-4082348.81],[15653720.6,-4082358.36]]]}\",\n      \"id\": \"s0\",\n      \"mean\": 454.736319937357,\n      \"meanf\": 454.736319937357,\n      \"meanl\": 454.736319937357\n    },\n    {\n      \"area\": 0.260426650424302,\n      \"geojson\": {\n        \"type\": \"Polygon\",\n        \"crs\": {\n          \"type\": \"name\",\n          \"properties\": {\n            \"name\": \"EPSG:3857\"\n          }\n        },\n        \"coordinates\": [\n          [\n            [\n              15654016.8,\n              -4082081.28\n            ],\n            [\n              15653997.6,\n              -4082119.5\n            ],\n            [\n              15654007.2,\n              -4082100.39\n            ],\n            [\n              15654016.8,\n              -4082081.28\n            ]\n          ]\n        ]\n      },\n      \"id\": \"s1\",\n      \"mean\": 115.470267704555,\n      \"meanf\": 115.470267704555,\n      \"meanl\": 115.470267704555\n    },\n    {\n      \"area\": 0.260427597910911,\n      \"geojson\": {\n        \"type\": \"Polygon\",\n        \"crs\": {\n          \"type\": \"name\",\n          \"properties\": {\n            \"name\": \"EPSG:3857\"\n          }\n        },\n        \"coordinates\": [\n          [\n            [\n              15653777.9,\n              -4082043.06\n            ],\n            [\n              15653825.7,\n              -4082138.6\n            ],\n            [\n              15653758.8,\n              -4082071.72\n            ],\n            [\n              15653777.9,\n              -4082043.06\n            ]\n          ]\n        ]\n      },\n      \"id\": \"s2\",\n      \"mean\": 440.170846848261,\n      \"meanf\": 440.170846848261,\n      \"meanl\": 440.170846848261\n    }\n  ],\n  \"stats\": {\n    \"id\": 4807,\n    \"n\": 47,\n    \"svar\": 43854.5099552294,\n    \"total_svar\": 46241858.7593061,\n    \"total_var\": 209986565.36616,\n    \"var\": 57436.150264267\n  }\n}"
								}
							]
						},
						{
							"name": "/indicator/:indicatorId/rasterData",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/indicator/:indicatorId/rasterData?polygonId=<integer>&ownerId=<string>&xyzId=<string>&geometry=<string>&bbox=<string>&srcSrid=4326&z=14&buffer=0&date=<date>&period=14&dateFrom=<date>&dateTo=<date>&daily=<string>&minCover=<float>&scale=raw&format=<string>&rasterFormat=<string>&colorMap=<string>&encode=<string>&position=center&limit=0&aggregate=none&srid=<integer>&interpolation=w&lambda=10&minValid=<int>&nLoops=3&startValue=0.3&endValue=0.35&minPeriodLength=60&slope=<float>&const=<float>&k=2&statsBuf=10&dates=<date>&etSrc=<string>&leafResistance=100&cropHeight=0.4&atmPressure=101.325&a=2.8",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"indicator",
										":indicatorId",
										"rasterData"
									],
									"query": [
										{
											"key": "polygonId",
											"value": "<integer>",
											"description": "Defines the queried area as a registered polygon with a given id.\n  \nIf this parameter is used:\n  \n* `ownerId` must be provided as well.\n* authorization is performed against the polygon's owner account (instead of API users accounts)\n"
										},
										{
											"key": "ownerId",
											"value": "<string>",
											"description": "Id of the `polygonId` owner.\n  \nTo be provided only when `polygonId` parameter is used.\n"
										},
										{
											"key": "xyzId",
											"value": "<string>",
											"description": "Defines the queried area as a XYZ tile in the `x_y_z` format.\n  \nSee [here](https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames) for details.\n  \nCan be combined with `geometry` or `polygonId`. In such a case the returned raster extent will be determined by this parameter but all pixels outside of `geometry`/`polygonId` will be set to no data.\n"
										},
										{
											"key": "geometry",
											"value": "<string>",
											"description": "Defines the queried area as a geoJSON geometry.\n  \nGeometry's projection should be provided with the `srcSrid` parameter.\n"
										},
										{
											"key": "bbox",
											"value": "<string>",
											"description": "Defines the queried area as a bounding box in the `x1,y1,x2,y2` format.\n  \nCoordinates projection should be provided with the `srcSrid` parameter.\n"
										},
										{
											"key": "srcSrid",
											"value": "4326",
											"description": "An EPSG code of request's spatial parameters (like `geometry`), e.g. 4326 (WGS-84) or 3857 (Web Mercator).\n"
										},
										{
											"key": "z",
											"value": "14",
											"description": "Raster data zoom level.\n  \nThe raster piramids level to be used to fetch the data from - see [here](https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Resolution_and_Scale) for details.\n  \nRange of available values vary between indicators. You can check it using the `/indicator` endpoint.\n\nThe default value is the maximum value available for a given indicator.\n"
										},
										{
											"key": "buffer",
											"value": "0",
											"description": "A buffer size (in meters) to be applied to the `geometry`.\n  \nUsefeul when `geometry` is a point or to assure returned raster data contains also pixels which centroids don't intersect th `geometry`.\n\nWhen negative number is provided, the final `geometry` will be a bounding box of original `geometry` with a positive buffer value applied.\n"
										},
										{
											"key": "date",
											"value": "<date>",
											"description": "An alternative way of defining the time period. If `dateFrom` or `dateTo` aren't provided, their default values is `date - period` and `date + period`, respectively.\n\nA value of `now` indicates the current date.\n\nA default value is the current date.\n"
										},
										{
											"key": "period",
											"value": "14",
											"description": "An alternative way of defining the time period. If `dateFrom` or `dateTo` aren't provided, their default values is `date - period` and `date + period`, respectively.\n"
										},
										{
											"key": "dateFrom",
											"value": "<date>",
											"description": "Beginning of the queried time period.\n\nThe default value is `date - period`.\n"
										},
										{
											"key": "dateTo",
											"value": "<date>",
											"description": "End of the queried time period.\n\nThe default value is `date + period`.\n"
										},
										{
											"key": "daily",
											"value": "<string>",
											"description": "If not present or with the `0` value, data is gathered from actual acquistions.\n\nIf `daily=1`, interpolated daily data is used instead. This assures data exists for each day in the requested time period. Daily data are generated on the fly and cached. It means if you request data outside of cache, generating them will take (a lot of) time.\n\nThis parameter is still in experimental phase and may not work correctly.\n"
										},
										{
											"key": "minCover",
											"value": "<float>",
											"description": "Minimum coverage provided by an acquisition to be included in the response.\n  \n0 means no coverage and 1 means full coverage only.\n  \nProviding a value will cause coverage statistics to be included in the response.\n\nDefault value varies between indicators. You can check it using the `/indciator` endpoint.\n"
										},
										{
											"key": "scale",
											"value": "raw",
											"description": "Determines the way raster values are scaled.\n  \n* raw - use values as they are stored in the database (e.g. 0-80 for LAI)\n* real - rescale values to indicator's phisical values range (e.g. 0-8 fro LAI)\n* stdfloat - standardize to mean 0 and standard deviation 1 within the scene\n* stdbyte - standardize to mean 127 and standard deviation 25 within the scene\n* stretch - transform in a way the minimum value within the scene equals 0 and maximum equals 254\n* grayscale - transform in a way minimum phisical value of the indicator corresponds to 0 and maximum to 254\n"
										},
										{
											"key": "format",
											"value": "<string>",
											"description": "Response format.\n  \nThe actual content of the `application/*` responses depends on `encode` parameter value.\n\n`image/tiff` response format returns acquisitions stacked as bands.\n\nAs `image/jpeg`, `image/png` and geoJSON response formats are unable to return more that one acquisition, only the most recent one is returned.\n"
										},
										{
											"key": "rasterFormat",
											"value": "<string>",
											"description": "Returned raster data format.\n  \nIt doesn't determine the response format (this is determined by the `format` parameter) and is affected by the `encode` parameter.\n"
										},
										{
											"key": "colorMap",
											"value": "<string>",
											"description": "Determines if a color map should be used.\n  \n* `0` indicates no color map should be used. This value is automatically enforced when `rasterFormat` is other than `image/png`, `image/jpeg` or `image/tiff`.\n* `1` indicates a default color map for a given `indicatorId` should be used. Takes effect only when `scale` equals to `raw`.\n* `mapName` indicates name of the color map to be used. There are a few general-use color maps available: `viridis1`, `viridis2`, `plasma1`, `plasma2` (see [here](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html#the-color-scales)), `bw` (black-white), `wb` (white-black) and `ndvi`. They are meant to work with values in `0-254` scale. If the indicator you are using is on a different scale, use `scale=grayscale` parameter to map it to `0-254`. The difference between `viridis1`/`viridis2` and `plasma1`/`plasma2` is the scale direction.\n* `postgisColorMapDef` explicitely provided color map. This allows you to apply any color map of your choice. It just has to follow the the format used by the Postgis [ST_ColorMap()](https://postgis.net/docs/RT_ST_ColorMap.html) function. Remember the map is applied to the already values transformed according to the `scale` request parameter.\n"
										},
										{
											"key": "encode",
											"value": "<string>",
											"description": "Determines the way raster data values are represented.\n\n* `raw` means raster data will be provided as they are. This value is set automatically for `image/*` reponse formats (when `format` equals to `image/png`, `image/jpeg` or `image/tiff`) and is invalid for other response formats.\n* `base64` and `hex` means raster data will be base64 or hex encoded. This settings are valid only when `format` equals to `application/json` and `rasterFormat` is one of `image/png`, `image/jpeg` or `image/tiff`.\n* `values` causes pixes values to be converted into a vector representation. If the `format` indicates geoJSON response, every pixel will be turned into a geoJSON feature and for `application/json` response format pixels will be represented by a collection of objects providing pixel position and value. The way pixel position is represented is determined by the `position` parameter.\n* `stats` causes raster data to be skipped and only summary statistics (valid pixel count, requested area coverage, min, max, mean value, standard deviation) to be returned.\n"
										},
										{
											"key": "position",
											"value": "center",
											"description": "The position within a pixel being used as a pixel's vector representation.\n\n* `corner` indicates upper-left corner\n* `center` indicates center\n* `polygon` indicates a polygon covering whole pixel area\n"
										},
										{
											"key": "limit",
											"value": "0",
											"description": "Maximum number of acqusitions returned (0 means no limit).\n"
										},
										{
											"key": "aggregate",
											"value": "none",
											"description": "Determines if the output should be aggregated to a single raster over acqisition dates and if so, which aggregate function should be used.\n\nThe aggregation is performed **after** applying the `scale` parameter and **before** `colorMap`, `limit`, `format`, `rasterFormat`, `encode`, `position` and `srid` ones. \n\nAggregation forces raster output pixel format to 32-bit float.\n"
										},
										{
											"key": "srid",
											"value": "<integer>",
											"description": "An EPSG code of returned spatial objects projection, e.g. 4326 (WGS-84) or 3857 (Web Mercator)\n\nIf not provided `srcSrid` parameter value is used and if `srcSrid` parameter isn't provided as well, a default value of `4326` is assumed.\n"
										},
										{
											"key": "interpolation",
											"value": "w",
											"description": "**(valid only for the _mzm_ indicator)** Daily data interpolation method (_l_ - linear, _w_ - whitakker smoother)\n"
										},
										{
											"key": "lambda",
											"value": "10",
											"description": "**(valid only for the _mzm_ indicator)** Whittaker smoother _lambda_ parameter (the bigger the value, the more smoothed output)\n"
										},
										{
											"key": "minValid",
											"value": "<int>",
											"description": "**(valid only for the _mzm_ and _irp_ indicators)** \n\n* For _mzm_: Minimum number of valid acquisitions to provide a smoothed data series for a pixel when the whittaker smoother is used.\n* For _irp_: Minumum number of valid acquisitions to consider output of a pixel valid.\n\nDefault value can be obtained from the /indicator endpoint\n"
										},
										{
											"key": "nLoops",
											"value": "3",
											"description": "**(valid only for the _mzm_ indicator)** Number of whittaker smoother loops.\n"
										},
										{
											"key": "startValue",
											"value": "0.3",
											"description": "**(valid only for the _mzm_ indicator)** Minimal NDVI value to start the _mzm_ indicator computation (evalutated on a pixel level). \n"
										},
										{
											"key": "endValue",
											"value": "0.35",
											"description": "**(valid only for the _mzm_ indicator)** Minimal NDVI value ending the _mzm_ indicator computation (evalutated on a pixel level). \n"
										},
										{
											"key": "minPeriodLength",
											"value": "60",
											"description": "**(valid only for the _mzm_ indicator)** Minimum length (in days) of a period for which the _mzm_ indicator is computed (evalutated on a pixel level). \n\nIn other words the `endValue` is checked only after `minPeriodLength` days from NDVI reaching the `startValue` (on a pixel level).\n"
										},
										{
											"key": "slope",
											"value": "<float>",
											"description": "**(valid only for the _mzm_ and _irp_ indicators)** Slope coefficient used in the indicator formula.\n\nDefault value can be obtained from the /indicator endpoint\n"
										},
										{
											"key": "const",
											"value": "<float>",
											"description": "**(valid only for the _mzm_ and _irp_ indicators)** Constant coefficient used in the indicator formula.\n\nDefault value can be obtained from the /indicator endpoint\n"
										},
										{
											"key": "k",
											"value": "2",
											"description": "**(valid only for the _mzm_ indicator)** Coefficient used in the _mzm_ indicator standarization formula.\n"
										},
										{
											"key": "statsBuf",
											"value": "10",
											"description": "**(valid only for the _mzm_ indicator)** Buffer (in meters) used to compute resulting raster statistics. It's used to avoid noise which can be introduced by the pixels on the border of the processed geometry.\n"
										},
										{
											"key": "dates",
											"value": "<date>",
											"description": "**(valid only for the _mzm_ and _irp_ indicators)** Coma separated list of data acquisition dates (in _YYYY-MM-DD_ format) to be used for the indicator computation.\n"
										},
										{
											"key": "etSrc",
											"value": "<string>",
											"description": "**(valid only for the _mzm_ and _irp_ indicators)** Source of the ET0 (base evapotranspiration) data. Use with caution.\n\nBe aware different sources have different spatial and temporal coverages and there's no API allowing to check it.\n\n* raster - forecasts from Australian Meteo Office\n* coala - interpolation based on public historical data from meteo stations published by the Australian Meteo Office\n* metgis - forecasts from the metgis service\n* openweather - forecasts from the openweather service\n"
										},
										{
											"key": "leafResistance",
											"value": "100",
											"description": "**(valid only for the _et_ indicator)** Leaf resistance parameter value used in the _et_ indicator formula.\n"
										},
										{
											"key": "cropHeight",
											"value": "0.4",
											"description": "**(valid only for the _et_ indicator)** Crop height (in meters) parameter value used in the _et_ indicator formula.\n"
										},
										{
											"key": "atmPressure",
											"value": "101.325",
											"description": "**(valid only for the _et_ indicator)** Atmospheric pressure (in kPa) parameter value used in the _et_ indicator formula.\n"
										},
										{
											"key": "a",
											"value": "2.8",
											"description": "**(valid only for the _cwr_ indicator)** Value of the A coefficient in the CWR computation formula)\n"
										}
									],
									"variable": [
										{
											"key": "indicatorId",
											"value": "<string>",
											"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
										}
									]
								},
								"description": "A pocket knife for raster data access. This endpoint allows to fetch almost any raster data in almost any format. It's being used under the hood by most other API endpoints.\n\nEndpoint parameters form few groups:\n\n* Queried area definition.\n  * It can be done in four ways - by providing `geometry`, `bbox`, `polygonId` or `xyzId`.\n  * `geometry`, `bbox` and `polygonId` are affected by `buffer`\n  * `geometry` and `bbox` require `srcSrid` to be provided (until the default `srcSrid` value of `4326` is correct)\n  * `xyzId` can be used with `geometry` or `polygonId` (see the `xyzId` description)\n* Queried time period definition: `dateFrom`, `dateTo`, `date` and `period`.\n* Query filter: `minCover`.\n* Output format: `format`, `rasterFormat`, `encode`, `position`, `srid`.\n* Raster values transformation: `scale` and `colorMap`.\n* Other: `limit`.\n\nMost parameters have sane defaults, so to at the beginning focus on `indicatorId`, `dateFrom`, `dateTo`, `format` and optionally `encode` and add others only when needed.\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/indicator/:indicatorId/rasterData?polygonId=<integer>&ownerId=<string>&xyzId=<string>&geometry=<string>&bbox=<string>&srcSrid=4326&z=14&buffer=0&date=<date>&period=14&dateFrom=<date>&dateTo=<date>&daily=<string>&minCover=<float>&scale=raw&format=<string>&rasterFormat=<string>&colorMap=<string>&encode=<string>&position=center&limit=0&aggregate=none&srid=<integer>&interpolation=w&lambda=10&minValid=<int>&nLoops=3&startValue=0.3&endValue=0.35&minPeriodLength=60&slope=<float>&const=<float>&k=2&statsBuf=10&dates=<date>&etSrc=<string>&leafResistance=100&cropHeight=0.4&atmPressure=101.325&a=2.8",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indicator",
												":indicatorId",
												"rasterData"
											],
											"query": [
												{
													"key": "polygonId",
													"value": "<integer>"
												},
												{
													"key": "ownerId",
													"value": "<string>"
												},
												{
													"key": "xyzId",
													"value": "<string>"
												},
												{
													"key": "geometry",
													"value": "<string>"
												},
												{
													"key": "bbox",
													"value": "<string>"
												},
												{
													"key": "srcSrid",
													"value": "4326"
												},
												{
													"key": "z",
													"value": "14"
												},
												{
													"key": "buffer",
													"value": "0"
												},
												{
													"key": "date",
													"value": "<date>"
												},
												{
													"key": "period",
													"value": "14"
												},
												{
													"key": "dateFrom",
													"value": "<date>"
												},
												{
													"key": "dateTo",
													"value": "<date>"
												},
												{
													"key": "daily",
													"value": "<string>"
												},
												{
													"key": "minCover",
													"value": "<float>"
												},
												{
													"key": "scale",
													"value": "raw"
												},
												{
													"key": "format",
													"value": "<string>"
												},
												{
													"key": "rasterFormat",
													"value": "<string>"
												},
												{
													"key": "colorMap",
													"value": "<string>"
												},
												{
													"key": "encode",
													"value": "<string>"
												},
												{
													"key": "position",
													"value": "center"
												},
												{
													"key": "limit",
													"value": "0"
												},
												{
													"key": "aggregate",
													"value": "none"
												},
												{
													"key": "srid",
													"value": "<integer>"
												},
												{
													"key": "interpolation",
													"value": "w"
												},
												{
													"key": "lambda",
													"value": "10"
												},
												{
													"key": "minValid",
													"value": "<int>"
												},
												{
													"key": "nLoops",
													"value": "3"
												},
												{
													"key": "startValue",
													"value": "0.3"
												},
												{
													"key": "endValue",
													"value": "0.35"
												},
												{
													"key": "minPeriodLength",
													"value": "60"
												},
												{
													"key": "slope",
													"value": "<float>"
												},
												{
													"key": "const",
													"value": "<float>"
												},
												{
													"key": "k",
													"value": "2"
												},
												{
													"key": "statsBuf",
													"value": "10"
												},
												{
													"key": "dates",
													"value": "<date>"
												},
												{
													"key": "etSrc",
													"value": "<string>"
												},
												{
													"key": "leafResistance",
													"value": "100"
												},
												{
													"key": "cropHeight",
													"value": "0.4"
												},
												{
													"key": "atmPressure",
													"value": "101.325"
												},
												{
													"key": "a",
													"value": "2.8"
												}
											],
											"variable": [
												{
													"key": "indicatorId",
													"value": "<string>",
													"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"count\": 3771,\n    \"cover\": 1,\n    \"date\": \"2020-09-28\",\n    \"envelope\": [\n      140.61641663087195,\n      -34.39826981205312,\n      140.62319725524713,\n      -34.39451618711456\n    ],\n    \"max\": 103,\n    \"mean\": 76.5685494563776,\n    \"min\": 48,\n    \"raster\": \"iVBORw0KGgoAAAANSUhEUgAAAFMAAAAuCAAAAABxZXrDAAAAAnRSTlMA/1uRIrUAAAVWSURBVEiJ\\nrZfNqiRKEYS/iKo+DuLKBxIFFfGZ3SmCb6Ny5c5Md0W4yOrxgj8IWrtDd2VnxV/mUX970tcLFhRJ\\nThBlg0Rf2EpZAlUHLPoVbPgd/+psrMN6lE0RxAlWWJ/PWmBADoCEVErzGW9XPy9SAYqamiTaPHQE\\nncskbrAKz6OFpEgUV1brUNQD7TRR5PkDCUE3j71Eyry4sQRAovUJ634ZyaQtpc8PWBvqW+hQWmDt\\nlzaAcGvAjUBtC5XMgqA3Uq1A1BeJ3J9HgNIptUEIBMRMKc4BUhuBy30EnSIdNiVW01I2KRTh040k\\nGigpyJCcJyi0ZBpDvL9B2zPwZ947XRLctrlsT81GyJykApkEAxYKVVFb2saMEFTUd+cUes6+b28J\\nri4KsmDpUitDoJq7beJvH3CrqqiiLZuHRBOKlqSG0XOQBJWGs3ougzSs3A9GFAXc2unmtXsVJ5uo\\n9WrGUkJ2o7KJhAs0q4fH6FlgFeFEBtndpEFbC2xRjQTCxUF48GiRFuXcZm1VYhoddOd3N3m+ZI29\\nnUYa+r2U4Ei2cihNbaA9ppUIRlIoAwWi2qiWJYGseSgm2OrbyhonjHZEC6kUmtskRUppYAPLA79A\\nbpC0JpR6yeYauyOKSLRNaeU3cy2QlM2pH5q7GtAQrPkYInhNfxr/abtGq62ARv0mKFV089L2aEFt\\nW1kQoCyDru4pXB9RaeR/m9MkSCXa440+PHigecsyQcTLH2T1eeIlKoa/Aj6xGVKIGcH0WKDNxycV\\nuaBKxQMrslp2tTqMTo+ClPZ6gVicAV8YSjb7o7kkjNSuRCUmIK4+uYHBu75Q9fZ+1WrazWa5oul4\\n2u9A04ikwpU7uV7fujf75NdY/Wb++GVDvs2bhqLgm82UyBf9gHrjopq6bmXfYG5nerF5OtJEaluy\\n31Hz9ZnNPoqsCtpkNTQ9OUOQSqboSdWInGz+/OnRoyV4FhK5tCye3z+/sEyjpYE8HRp6vjbLu2fy\\naWCeiVNtfvrJGX0mGU2dKObzV31iUzWyUCFDH+elPrakdXkNE53AyebHH3RU147UfaLCefgTj+nA\\nayQ8UuD1GR67NzZU+g+Kms2izbkDZ44lhf3wg081mfFBK06opJVaqLoPH9VKRXQTt+fFjSC3w1lm\\n8rbYN8ub95DDpy+JUG6GzChQT7w5u2mbuWQi27Q9r94Un1ky4212m9xXqa16s4XLxyZqGYG2HYmk\\nhdcR1Mw6MZncFDWzHYyG6cXs+o5uTqpNXu914lE5J+bgg2VET0LbFypNzxkrE7v9lmMyJWfzyvXV\\npL8u0ncWNMPO1Jz7ad7rkWiVd6cWTb05h4qcOwI0r78OhwZp8rlpBjX5To2h6e32QcIbVbmpSHof\\nMASjsbToAQbHeVBmaFTDUYHOkJc3ik40iAz7tD1oJPgOTGYruYvdu/bsOnw7RWKTw8msfW1bizTH\\nnLvq3Cnxdtsdd4hKbWeW8d5FJDZfdZewt4/aJoQZ5lIxLpzU83oPc/eWCIs7pGi0+YK9aI0skbwO\\n1jI+Bb5gJetysAES9nMkoDv8xqRCSN28kD9WZ/k0r5MKyXdv88xL71mDx7I6wuOh97YL4BbppQK/\\nsc4oz+rXo8fDLJ5f1k9YstqwFknVl6DqX57LIugdZX3nTJ6f9QPSAPj1l+f62MS8nvoRe+3ZKfc1\\nzkTLX7/uWVAGUtxKBpKvX/6p5g/Oz7pYfjSFj81SIk3N7z4vz/9EFMRKJYnkPP/0n2r+8PzSrNXD\\nMoZ+9/3DUskV2bo7Uc7rj/y3Nf/N+cUJ1uaALO3vz+/5X2v+8PxK4m9/4P9a89v5O/Q+esgARGO2\\nAAAAAElFTkSuQmCC\",\n    \"stddev\": 11.6051569792828,\n    \"sum\": 288740\n  },\n  {\n    \"count\": 3762,\n    \"cover\": 0.997613365155131,\n    \"date\": \"2020-09-23\",\n    \"envelope\": [\n      140.61641663087195,\n      -34.39826981205312,\n      140.62319725524713,\n      -34.39451618711456\n    ],\n    \"max\": 165,\n    \"mean\": 94.3354598617756,\n    \"min\": 47,\n    \"raster\": \"iVBORw0KGgoAAAANSUhEUgAAAFMAAAAuCAAAAABxZXrDAAAAAnRSTlMA/1uRIrUAAAbgSURBVEiJ\\nrZfBri7JUYS/yKz6///cc2eubARvhMTOxnuLhV/EO56ABTsWfgsLnoYVHiOPZ+49f3dVZnjRZ9AI\\nIyRkUmq1ulqKqqyIjKyS/95rnT1prAQsxaMV4U6grVQRQSnSLdL0PvXhqz5/w/8Ug5Fzz/Vyg91z\\nqndFsvauc78CLjI2kdEEEKjLz8MHXj8PqZGgi5JaGe7Bp5fjjI6ZQIAiqNrPz98vD8joVtwkRZDQ\\nhVT1+Zj6titSVUnTJG4rZu49ePlJ9H6eY5IBhELP3x3P4+3zxwfMEfI1KiHadKNn3yaKSNx1Gl2L\\nQZTPgZlFugLREOF+e0YGfS4YYEmAQljRxGCbEEIhBwNkKShj7R4shuSqZrMXnTP1ilZOFsyUjAGi\\n2RK4WdAB7gqy08hSdktSM7BCqT423W+nnTMznLfHrg17BIBkl8AGmwKlDe5wRAC6nnJpMOSk5t5U\\n7wV2DLXmYx8Fa8S4MNvjHbNoIFySwSEIwFi4rcGH7uy3WgeVw0h2+5THrQqeKDKQ7TC2TVer92wc\\nsh2hpJG7mxjYg258fOE86KkHGbV0HCFPLSijSINR47ZpQyETEraRkERuE8FYg3btP/5+7CcVetXt\\nsVHAWnq5wcqQwBYWgEE0oQocXeQURCaM3EaDweTc9QJix1x6Mj/O9dPJ2x++G3DPzJhB7WrTGoGP\\nZ9q6JerOzlRShgzY5YiBibxrOejlYDgetxxj5Nv3ARm6OL1IwMbIKOPaRWEJCawY2DBozZvPz0uw\\nrJhFZroot0ACGhqFwVXY2QrRFIbW+6yVIeHNYGTMcf81v+S+95f794v7aHU9j/P1sikXQtFC3Uap\\nNVZ1IUnd/iENEcFuDc7eHz4IHsTuXrsfDbv225fzFVoqjRAowFJDDg21mwBdZWYDTShkD9a5cyb8\\nFd+9zU7kXV1v5/O5motkhoAwVgoUM/yOJIX7wtQWKakGr/Oevv3z+Tf89T/9gx5SHOdx33We9Rki\\nMEQIqWly0uxYdevGakdGA4Ep3N06Bq8vLy6Rovi6h1Cdz4zbns8GFRmXMdn4XauNMBi8PdLXZ3Tb\\n7h48Xl/72VtB/+PXp8G117qP220EqJVjxLvc/Y5dChB+l7+u/bzezeB+u7XPNjAet9Pt9j6TuN/H\\nxYxSU23HpZtBV+JoCBSXvXYnoXYQY/Afj5vd+9NknSuEqs5TYZTR+BJcqxvR7SB6Na69SHdLNoCK\\nAry3B7+/D4/wy+bLc9FQb+eOU2q6ANuDki2zSkn49LH6OMmwFbag3Zcr7LUHn77+mEM6n9Dn0aSP\\nenxU44jCjNeXVoageXFDZuxeug2kLpv+wWTaihxr8Onjx5jdIULushwjX/ooYhb2fPnUGil3kzSk\\not/e6mHCe5UzhHBBEHSPweOerkWLvN2eq9vMmHW6CYHJGyMyvJpBG0SMcF4b010pcPVlDjaD24he\\nhymKvC3cyhHc42RuvHr3y819KQBA0ep2A3s3sgUuX7871qCvoVrsrmtpMc0oUGIHjrgsWXZDOGyp\\nRVUTTQN1JeBGHrxX9T7YXhWGztxyV3e+HwXe6wbXFkLlHypLF5CrDSGXFIOzMQpM7V0Sjbvo86x5\\nR60pl+RqyrVNxa4WCpx22zbuLeSQTAw+TDR754M4KgpEVcRIvnv9ilil/TlthdVuRNVzjNgxEL0V\\nuwwoUM7wWnMQbkJWkhG6eljYEaOPFwLvPWLHnI7Ghu4Omy7a3VyliUREDFAPhlZpS8U6jrJHrh0i\\nXD4+E0HZrGhl266GMuVwUwWAfHVqdbdixECq1WutxfN51mmx+zEiTLroqa6IxBU0tQvw2tUFVkQL\\n6V1QlGU8qO5ez3WenOc6v3RV8zpvhOYtiRE2OSzxTnVHH2e5BEFf1Ou9edgtD3aYmAHAOqprlf4w\\nXvXI+dOEMfw856uaUDm1WN3P00pEqDrUxq2gUXpZg95wHSSmZ2aEqhW9n6tkaA0TRCBEK4jdGXIR\\nkpXRHSAEPg8YPfjPGdrKvVh8nJvq2mC+PG/1QDnur+upTLmhbLrH7fjcFYUFIW/sMrfULhWDfx8x\\nw6qNY5yK6IYWino+UN7uc1CZ7g17LdbOrstgIKAN9C6Uyuwdg3+BX6m6CpOddq2RhWvz5U6WLiuz\\nhN1VNEFcvcSCq04jmyJT0cj/7XLzs6p+3HZ3l7/6mhiPD7dcFWP0btYqylO/+2ZNQgpVRWwKrzY5\\nh47+M8wfxd/OF2JMyvS8jzEMIfbO8c03xyCJpGpEU4p6w85brt/+b5g/jl88rrvKmMilb79dISDD\\nPbNZvvGFXYz87Z/n/n+Lv2t5zuCs2/1gnc2/8Zdi/jh+5r36X/l/xfyv+BMn1FZ8YKj2HgAAAABJ\\nRU5ErkJggg==\",\n    \"stddev\": 22.566592632579,\n    \"sum\": 354890\n  }\n]"
								},
								{
									"name": "Wrong parameter values",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/indicator/:indicatorId/rasterData?polygonId=<integer>&ownerId=<string>&xyzId=<string>&geometry=<string>&bbox=<string>&srcSrid=4326&z=14&buffer=0&date=<date>&period=14&dateFrom=<date>&dateTo=<date>&daily=<string>&minCover=<float>&scale=raw&format=<string>&rasterFormat=<string>&colorMap=<string>&encode=<string>&position=center&limit=0&aggregate=none&srid=<integer>&interpolation=w&lambda=10&minValid=<int>&nLoops=3&startValue=0.3&endValue=0.35&minPeriodLength=60&slope=<float>&const=<float>&k=2&statsBuf=10&dates=<date>&etSrc=<string>&leafResistance=100&cropHeight=0.4&atmPressure=101.325&a=2.8",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"indicator",
												":indicatorId",
												"rasterData"
											],
											"query": [
												{
													"key": "polygonId",
													"value": "<integer>"
												},
												{
													"key": "ownerId",
													"value": "<string>"
												},
												{
													"key": "xyzId",
													"value": "<string>"
												},
												{
													"key": "geometry",
													"value": "<string>"
												},
												{
													"key": "bbox",
													"value": "<string>"
												},
												{
													"key": "srcSrid",
													"value": "4326"
												},
												{
													"key": "z",
													"value": "14"
												},
												{
													"key": "buffer",
													"value": "0"
												},
												{
													"key": "date",
													"value": "<date>"
												},
												{
													"key": "period",
													"value": "14"
												},
												{
													"key": "dateFrom",
													"value": "<date>"
												},
												{
													"key": "dateTo",
													"value": "<date>"
												},
												{
													"key": "daily",
													"value": "<string>"
												},
												{
													"key": "minCover",
													"value": "<float>"
												},
												{
													"key": "scale",
													"value": "raw"
												},
												{
													"key": "format",
													"value": "<string>"
												},
												{
													"key": "rasterFormat",
													"value": "<string>"
												},
												{
													"key": "colorMap",
													"value": "<string>"
												},
												{
													"key": "encode",
													"value": "<string>"
												},
												{
													"key": "position",
													"value": "center"
												},
												{
													"key": "limit",
													"value": "0"
												},
												{
													"key": "aggregate",
													"value": "none"
												},
												{
													"key": "srid",
													"value": "<integer>"
												},
												{
													"key": "interpolation",
													"value": "w"
												},
												{
													"key": "lambda",
													"value": "10"
												},
												{
													"key": "minValid",
													"value": "<int>"
												},
												{
													"key": "nLoops",
													"value": "3"
												},
												{
													"key": "startValue",
													"value": "0.3"
												},
												{
													"key": "endValue",
													"value": "0.35"
												},
												{
													"key": "minPeriodLength",
													"value": "60"
												},
												{
													"key": "slope",
													"value": "<float>"
												},
												{
													"key": "const",
													"value": "<float>"
												},
												{
													"key": "k",
													"value": "2"
												},
												{
													"key": "statsBuf",
													"value": "10"
												},
												{
													"key": "dates",
													"value": "<date>"
												},
												{
													"key": "etSrc",
													"value": "<string>"
												},
												{
													"key": "leafResistance",
													"value": "100"
												},
												{
													"key": "cropHeight",
													"value": "0.4"
												},
												{
													"key": "atmPressure",
													"value": "101.325"
												},
												{
													"key": "a",
													"value": "2.8"
												}
											],
											"variable": [
												{
													"key": "indicatorId",
													"value": "<string>",
													"description": "(Required) Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain.\n"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "/indicator",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/indicator",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"indicator"
							]
						},
						"description": "Returns a list of available indicators, their properties and default settings.\n\nProvided indicator data include:\n\n* `indicatorId`\n* `scale` coefficient used to transform indicator stored (so-called raw) value to its phisical value (`phisicalValue = rawValue * scale`)\n* `defaultDate` default value of the `date` request parameter\n* `defaultPeriod` default value of the `period` request parameter\n* `defaultMinCover` default value of the `minCover` request parameter\n* `defaultColorMap` default value of the `colorMap` request parameter\n* `smoothingLambda` whittaker smoother lambda parameter used for generation of interpolated daily data series (see the `daily` parameter of the `/indicator/{indicatorId}/rasterData` endpoint)\n* `minZoomLevel` minimum value of the `z` request parameter\n* `maxZoomLevel` maximum value of the `z` request parameter\n* `grayscaleMinValue` lower bound of indicator's value range. It is applied to indicator's stored (so-called raw) values which may differ from phisical ones (see `scale` above). This parameter (as well as `grayscaleMaxValue`) may or may not cover the whole theoretical indicator's value range. It's meant to provide useful transformation of indicator's value into a given range (e.g. 0-254 for producing a grayscale image) which means very low (or high for `grayscaleMaxValue`) values might be excluded on purpose.\n* `grayscaleMaxValue` upper bound of indicator's value range. See above.\n"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/indicator",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"indicator"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"indicatorId\": \"albedo\",\n    \"scale\": 0.01,\n    \"defaultDate\": \"now\",\n    \"defaultPeriod\": 14,\n    \"defaultMinCover\": 0.7,\n    \"defaultColorMap\": \"albedo\",\n    \"smoothingLambda\": 10,\n    \"minZoomLevel\": 4,\n    \"maxZoomLevel\": 14,\n    \"grayscaleMinValue\": 0,\n    \"grayscaleMaxValue\": 100\n  },\n  {\n    \"indicatorId\": \"tempavg\",\n    \"scale\": 1,\n    \"defaultDate\": \"now\",\n    \"defaultPeriod\": 0,\n    \"defaultMinCover\": 0,\n    \"defaultColorMap\": \"tempavg\",\n    \"smoothingLambda\": 10,\n    \"minZoomLevel\": 4,\n    \"maxZoomLevel\": 4,\n    \"grayscaleMinValue\": -15,\n    \"grayscaleMaxValue\": 40\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "classification",
			"item": [
				{
					"name": "{date Id}",
					"item": [
						{
							"name": "/classification/:dateId",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "srcSrid",
											"value": "4326",
											"description": "Projection (SRID code) of the `geometry` parameter value",
											"type": "text"
										},
										{
											"key": "geometry",
											"value": "<string>",
											"description": "geoJSON providing the area to be classified",
											"type": "text"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Optional name of the classification.\n\nClassifications are uniquely identified by sequentialy generated dates (it's done that way so results can be accessed in exacly same way as any other indicator). This parameter allows to define a descriptive label for the classification.\n",
											"type": "text"
										},
										{
											"key": "dateFrom",
											"value": "<date>",
											"description": "Beginning of the classification time period",
											"type": "text"
										},
										{
											"key": "dateTo",
											"value": "<date>",
											"description": "Ending of the classification time period",
											"type": "text"
										},
										{
											"key": "minCover",
											"value": "0.95",
											"description": "Minimum coverege of both train and target data for a given feature (`indicator x date`) to be used in the classification.\n",
											"type": "text"
										},
										{
											"key": "maxFeatures",
											"value": "60",
											"description": "Maximum number of features used for the classification.\n\nBigger number generally increases classification accuracy but lower the number of features, the quicker classification is performed.\n\nFeatures are selected using the mutual information criterion.\n",
											"type": "text"
										},
										{
											"key": "nTrees",
											"value": "100",
											"description": "Number of trees used by the random forest classification algorithm.",
											"type": "text"
										},
										{
											"key": "minProb",
											"value": "0.66",
											"description": "Minimum probability to keep the predicted class in the output. Pixels with lower probability are assigned the `ambigous` class.",
											"type": "text"
										},
										{
											"key": "indicators",
											"value": "[\"blue\",\"green\",\"red\",\"nir\",\"swir\",\"ndvi\",\"ndmi\",\"ccc\",\"fapar\",\"fcover\",\"lai\",\"str\"]",
											"description": "List of indicators (see the `/indicator` endpoint) used for the classifciation.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/classification/:dateId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classification",
										":dateId"
									],
									"variable": [
										{
											"key": "dateId",
											"value": "<date>",
											"description": "(Required) Base classification identifier - see GET on the `/classification` endpoint"
										}
									]
								},
								"description": "Reruns a given classification overwriting its parameters with the ones provided by the request body.\n\nParameters not provided by the request body are taken from the previous classification run.\n"
							},
							"response": [
								{
									"name": "Classification performed.",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "srcSrid",
													"value": "4326",
													"description": "Projection (SRID code) of the `geometry` parameter value",
													"type": "text"
												},
												{
													"key": "geometry",
													"value": "<string>",
													"description": "geoJSON providing the area to be classified",
													"type": "text"
												},
												{
													"key": "name",
													"value": "<string>",
													"description": "Optional name of the classification.\n\nClassifications are uniquely identified by sequentialy generated dates (it's done that way so results can be accessed in exacly same way as any other indicator). This parameter allows to define a descriptive label for the classification.\n",
													"type": "text"
												},
												{
													"key": "dateFrom",
													"value": "<date>",
													"description": "Beginning of the classification time period",
													"type": "text"
												},
												{
													"key": "dateTo",
													"value": "<date>",
													"description": "Ending of the classification time period",
													"type": "text"
												},
												{
													"key": "minCover",
													"value": "0.95",
													"description": "Minimum coverege of both train and target data for a given feature (`indicator x date`) to be used in the classification.\n",
													"type": "text"
												},
												{
													"key": "maxFeatures",
													"value": "60",
													"description": "Maximum number of features used for the classification.\n\nBigger number generally increases classification accuracy but lower the number of features, the quicker classification is performed.\n\nFeatures are selected using the mutual information criterion.\n",
													"type": "text"
												},
												{
													"key": "nTrees",
													"value": "100",
													"description": "Number of trees used by the random forest classification algorithm.",
													"type": "text"
												},
												{
													"key": "minProb",
													"value": "0.66",
													"description": "Minimum probability to keep the predicted class in the output. Pixels with lower probability are assigned the `ambigous` class.",
													"type": "text"
												},
												{
													"key": "indicators",
													"value": "[\"blue\",\"green\",\"red\",\"nir\",\"swir\",\"ndvi\",\"ndmi\",\"ccc\",\"fapar\",\"fcover\",\"lai\",\"str\"]",
													"description": "List of indicators (see the `/indicator` endpoint) used for the classifciation.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/classification/:dateId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classification",
												":dateId"
											],
											"variable": [
												{
													"key": "dateId",
													"value": "<date>",
													"description": "(Required) Base classification identifier - see GET on the `/classification` endpoint"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"user_id\": \"coala\",\n  \"date\": \"2000-01-01T00:00:00.000Z\",\n  \"name\": \"example\",\n  \"state\": \"finished\",\n  \"remarks\": null,\n  \"starttime\": \"2021-09-16T12:55:11.553Z\",\n  \"endtime\": \"2021-09-16T12:58:15.209Z\",\n  \"log\": \"INFO:2021-09-16 14:55:14,503: Reading reference data\\nINFO:2021-09-16 14:55:16,220: Projecting target geometry to indicator zoom levels (...)\\n\",\n  \"params\": {\n    \"nJobs\": 2,\n    \"dateFrom\": \"2018-04-01T00:00:00.000Z\",\n    \"dateTo\": \"2018-09-30T00:00:00.000Z\",\n    \"nTrees\": 100,\n    \"minProb\": 0.66,\n    \"maxFeatures\": 60,\n    \"minCover\": 0.95,\n    \"srcSrid\": 4326,\n    \"geometry\": \"{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[16.5673,48.2101],[16.5673,48.2391],[16.5893,48.2391],[16.5893,48.2101],[16.5673,48.2101]]]}\",\n    \"indicators\": [\n      \"blue\",\n      \"green\",\n      \"red\",\n      \"nir\",\n      \"swir\",\n      \"ndvi\",\n      \"ndmi\",\n      \"ccc\",\n      \"fapar\",\n      \"fcover\",\n      \"lai\",\n      \"str\"\n    ]\n  },\n  \"refdata\": [\n    {\n      \"x\": 16.6391140924664,\n      \"y\": 48.206487648352,\n      \"label\": \"Mais\"\n    },\n    {\n      \"x\": 16.6337805808201,\n      \"y\": 48.2059966592951,\n      \"label\": \"Mais\"\n    }\n  ]\n}"
								},
								{
									"name": "Bad Request - required parameters are misssing",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "srcSrid",
													"value": "4326",
													"description": "Projection (SRID code) of the `geometry` parameter value",
													"type": "text"
												},
												{
													"key": "geometry",
													"value": "<string>",
													"description": "geoJSON providing the area to be classified",
													"type": "text"
												},
												{
													"key": "name",
													"value": "<string>",
													"description": "Optional name of the classification.\n\nClassifications are uniquely identified by sequentialy generated dates (it's done that way so results can be accessed in exacly same way as any other indicator). This parameter allows to define a descriptive label for the classification.\n",
													"type": "text"
												},
												{
													"key": "dateFrom",
													"value": "<date>",
													"description": "Beginning of the classification time period",
													"type": "text"
												},
												{
													"key": "dateTo",
													"value": "<date>",
													"description": "Ending of the classification time period",
													"type": "text"
												},
												{
													"key": "minCover",
													"value": "0.95",
													"description": "Minimum coverege of both train and target data for a given feature (`indicator x date`) to be used in the classification.\n",
													"type": "text"
												},
												{
													"key": "maxFeatures",
													"value": "60",
													"description": "Maximum number of features used for the classification.\n\nBigger number generally increases classification accuracy but lower the number of features, the quicker classification is performed.\n\nFeatures are selected using the mutual information criterion.\n",
													"type": "text"
												},
												{
													"key": "nTrees",
													"value": "100",
													"description": "Number of trees used by the random forest classification algorithm.",
													"type": "text"
												},
												{
													"key": "minProb",
													"value": "0.66",
													"description": "Minimum probability to keep the predicted class in the output. Pixels with lower probability are assigned the `ambigous` class.",
													"type": "text"
												},
												{
													"key": "indicators",
													"value": "[\"blue\",\"green\",\"red\",\"nir\",\"swir\",\"ndvi\",\"ndmi\",\"ccc\",\"fapar\",\"fcover\",\"lai\",\"str\"]",
													"description": "List of indicators (see the `/indicator` endpoint) used for the classifciation.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/classification/:dateId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classification",
												":dateId"
											],
											"variable": [
												{
													"key": "dateId",
													"value": "<date>",
													"description": "(Required) Base classification identifier - see GET on the `/classification` endpoint"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/classification/:dateId",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "srcSrid",
											"value": "4326",
											"description": "Projection (SRID code) of the `geometry` parameter value",
											"type": "text"
										},
										{
											"key": "geometry",
											"value": "<string>",
											"description": "geoJSON providing the area to be classified",
											"type": "text"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Optional name of the classification.\n\nClassifications are uniquely identified by sequentialy generated dates (it's done that way so results can be accessed in exacly same way as any other indicator). This parameter allows to define a descriptive label for the classification.\n",
											"type": "text"
										},
										{
											"key": "dateFrom",
											"value": "<date>",
											"description": "Beginning of the classification time period",
											"type": "text"
										},
										{
											"key": "dateTo",
											"value": "<date>",
											"description": "Ending of the classification time period",
											"type": "text"
										},
										{
											"key": "minCover",
											"value": "0.95",
											"description": "Minimum coverege of both train and target data for a given feature (`indicator x date`) to be used in the classification.\n",
											"type": "text"
										},
										{
											"key": "maxFeatures",
											"value": "60",
											"description": "Maximum number of features used for the classification.\n\nBigger number generally increases classification accuracy but lower the number of features, the quicker classification is performed.\n\nFeatures are selected using the mutual information criterion.\n",
											"type": "text"
										},
										{
											"key": "nTrees",
											"value": "100",
											"description": "Number of trees used by the random forest classification algorithm.",
											"type": "text"
										},
										{
											"key": "minProb",
											"value": "0.66",
											"description": "Minimum probability to keep the predicted class in the output. Pixels with lower probability are assigned the `ambigous` class.",
											"type": "text"
										},
										{
											"key": "indicators",
											"value": "[\"blue\",\"green\",\"red\",\"nir\",\"swir\",\"ndvi\",\"ndmi\",\"ccc\",\"fapar\",\"fcover\",\"lai\",\"str\"]",
											"description": "List of indicators (see the `/indicator` endpoint) used for the classifciation.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/classification/:dateId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classification",
										":dateId"
									],
									"variable": [
										{
											"key": "dateId",
											"value": "<date>",
											"description": "(Required) Base classification identifier - see GET on the `/classification` endpoint"
										}
									]
								},
								"description": "Performs a new classification taking classification identified by the `dateId` parameter as a base.\n\nParameters specified in the request body overwrite the base classification parameters.\n"
							},
							"response": [
								{
									"name": "Classification performed.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "srcSrid",
													"value": "4326",
													"description": "Projection (SRID code) of the `geometry` parameter value",
													"type": "text"
												},
												{
													"key": "geometry",
													"value": "<string>",
													"description": "geoJSON providing the area to be classified",
													"type": "text"
												},
												{
													"key": "name",
													"value": "<string>",
													"description": "Optional name of the classification.\n\nClassifications are uniquely identified by sequentialy generated dates (it's done that way so results can be accessed in exacly same way as any other indicator). This parameter allows to define a descriptive label for the classification.\n",
													"type": "text"
												},
												{
													"key": "dateFrom",
													"value": "<date>",
													"description": "Beginning of the classification time period",
													"type": "text"
												},
												{
													"key": "dateTo",
													"value": "<date>",
													"description": "Ending of the classification time period",
													"type": "text"
												},
												{
													"key": "minCover",
													"value": "0.95",
													"description": "Minimum coverege of both train and target data for a given feature (`indicator x date`) to be used in the classification.\n",
													"type": "text"
												},
												{
													"key": "maxFeatures",
													"value": "60",
													"description": "Maximum number of features used for the classification.\n\nBigger number generally increases classification accuracy but lower the number of features, the quicker classification is performed.\n\nFeatures are selected using the mutual information criterion.\n",
													"type": "text"
												},
												{
													"key": "nTrees",
													"value": "100",
													"description": "Number of trees used by the random forest classification algorithm.",
													"type": "text"
												},
												{
													"key": "minProb",
													"value": "0.66",
													"description": "Minimum probability to keep the predicted class in the output. Pixels with lower probability are assigned the `ambigous` class.",
													"type": "text"
												},
												{
													"key": "indicators",
													"value": "[\"blue\",\"green\",\"red\",\"nir\",\"swir\",\"ndvi\",\"ndmi\",\"ccc\",\"fapar\",\"fcover\",\"lai\",\"str\"]",
													"description": "List of indicators (see the `/indicator` endpoint) used for the classifciation.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/classification/:dateId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classification",
												":dateId"
											],
											"variable": [
												{
													"key": "dateId",
													"value": "<date>",
													"description": "(Required) Base classification identifier - see GET on the `/classification` endpoint"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"user_id\": \"coala\",\n  \"date\": \"2000-01-01T00:00:00.000Z\",\n  \"name\": \"example\",\n  \"state\": \"finished\",\n  \"remarks\": null,\n  \"starttime\": \"2021-09-16T12:55:11.553Z\",\n  \"endtime\": \"2021-09-16T12:58:15.209Z\",\n  \"log\": \"INFO:2021-09-16 14:55:14,503: Reading reference data\\nINFO:2021-09-16 14:55:16,220: Projecting target geometry to indicator zoom levels (...)\\n\",\n  \"params\": {\n    \"nJobs\": 2,\n    \"dateFrom\": \"2018-04-01T00:00:00.000Z\",\n    \"dateTo\": \"2018-09-30T00:00:00.000Z\",\n    \"nTrees\": 100,\n    \"minProb\": 0.66,\n    \"maxFeatures\": 60,\n    \"minCover\": 0.95,\n    \"srcSrid\": 4326,\n    \"geometry\": \"{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[16.5673,48.2101],[16.5673,48.2391],[16.5893,48.2391],[16.5893,48.2101],[16.5673,48.2101]]]}\",\n    \"indicators\": [\n      \"blue\",\n      \"green\",\n      \"red\",\n      \"nir\",\n      \"swir\",\n      \"ndvi\",\n      \"ndmi\",\n      \"ccc\",\n      \"fapar\",\n      \"fcover\",\n      \"lai\",\n      \"str\"\n    ]\n  },\n  \"refdata\": [\n    {\n      \"x\": 16.6391140924664,\n      \"y\": 48.206487648352,\n      \"label\": \"Mais\"\n    },\n    {\n      \"x\": 16.6337805808201,\n      \"y\": 48.2059966592951,\n      \"label\": \"Mais\"\n    }\n  ]\n}"
								},
								{
									"name": "Bad Request - required parameters are misssing",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "srcSrid",
													"value": "4326",
													"description": "Projection (SRID code) of the `geometry` parameter value",
													"type": "text"
												},
												{
													"key": "geometry",
													"value": "<string>",
													"description": "geoJSON providing the area to be classified",
													"type": "text"
												},
												{
													"key": "name",
													"value": "<string>",
													"description": "Optional name of the classification.\n\nClassifications are uniquely identified by sequentialy generated dates (it's done that way so results can be accessed in exacly same way as any other indicator). This parameter allows to define a descriptive label for the classification.\n",
													"type": "text"
												},
												{
													"key": "dateFrom",
													"value": "<date>",
													"description": "Beginning of the classification time period",
													"type": "text"
												},
												{
													"key": "dateTo",
													"value": "<date>",
													"description": "Ending of the classification time period",
													"type": "text"
												},
												{
													"key": "minCover",
													"value": "0.95",
													"description": "Minimum coverege of both train and target data for a given feature (`indicator x date`) to be used in the classification.\n",
													"type": "text"
												},
												{
													"key": "maxFeatures",
													"value": "60",
													"description": "Maximum number of features used for the classification.\n\nBigger number generally increases classification accuracy but lower the number of features, the quicker classification is performed.\n\nFeatures are selected using the mutual information criterion.\n",
													"type": "text"
												},
												{
													"key": "nTrees",
													"value": "100",
													"description": "Number of trees used by the random forest classification algorithm.",
													"type": "text"
												},
												{
													"key": "minProb",
													"value": "0.66",
													"description": "Minimum probability to keep the predicted class in the output. Pixels with lower probability are assigned the `ambigous` class.",
													"type": "text"
												},
												{
													"key": "indicators",
													"value": "[\"blue\",\"green\",\"red\",\"nir\",\"swir\",\"ndvi\",\"ndmi\",\"ccc\",\"fapar\",\"fcover\",\"lai\",\"str\"]",
													"description": "List of indicators (see the `/indicator` endpoint) used for the classifciation.",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/classification/:dateId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"classification",
												":dateId"
											],
											"variable": [
												{
													"key": "dateId",
													"value": "<date>",
													"description": "(Required) Base classification identifier - see GET on the `/classification` endpoint"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "/classification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "srcSrid",
									"value": "4326",
									"description": "Projection (SRID code) of the `geometry` parameter value",
									"type": "text"
								},
								{
									"key": "geometry",
									"value": "<string>",
									"description": "geoJSON providing the area to be classified",
									"type": "text"
								},
								{
									"key": "name",
									"value": "<string>",
									"description": "Optional name of the classification.\n\nClassifications are uniquely identified by sequentialy generated dates (it's done that way so results can be accessed in exacly same way as any other indicator). This parameter allows to define a descriptive label for the classification.\n",
									"type": "text"
								},
								{
									"key": "dateFrom",
									"value": "<date>",
									"description": "Beginning of the classification time period",
									"type": "text"
								},
								{
									"key": "dateTo",
									"value": "<date>",
									"description": "Ending of the classification time period",
									"type": "text"
								},
								{
									"key": "minCover",
									"value": "0.95",
									"description": "Minimum coverege of both train and target data for a given feature (`indicator x date`) to be used in the classification.\n",
									"type": "text"
								},
								{
									"key": "maxFeatures",
									"value": "60",
									"description": "Maximum number of features used for the classification.\n\nBigger number generally increases classification accuracy but lower the number of features, the quicker classification is performed.\n\nFeatures are selected using the mutual information criterion.\n",
									"type": "text"
								},
								{
									"key": "nTrees",
									"value": "100",
									"description": "Number of trees used by the random forest classification algorithm.",
									"type": "text"
								},
								{
									"key": "minProb",
									"value": "0.66",
									"description": "Minimum probability to keep the predicted class in the output. Pixels with lower probability are assigned the `ambigous` class.",
									"type": "text"
								},
								{
									"key": "indicators",
									"value": "[\"blue\",\"green\",\"red\",\"nir\",\"swir\",\"ndvi\",\"ndmi\",\"ccc\",\"fapar\",\"fcover\",\"lai\",\"str\"]",
									"description": "List of indicators (see the `/indicator` endpoint) used for the classifciation.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/classification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"classification"
							]
						},
						"description": "Performs classification of a given area.\n\nDepending on the parameters (especially classified area size) this request may take from few minutes to hours.\n"
					},
					"response": [
						{
							"name": "Bad Request - required parameters are misssing",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "srcSrid",
											"value": "4326",
											"description": "Projection (SRID code) of the `geometry` parameter value",
											"type": "text"
										},
										{
											"key": "geometry",
											"value": "<string>",
											"description": "geoJSON providing the area to be classified",
											"type": "text"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Optional name of the classification.\n\nClassifications are uniquely identified by sequentialy generated dates (it's done that way so results can be accessed in exacly same way as any other indicator). This parameter allows to define a descriptive label for the classification.\n",
											"type": "text"
										},
										{
											"key": "dateFrom",
											"value": "<date>",
											"description": "Beginning of the classification time period",
											"type": "text"
										},
										{
											"key": "dateTo",
											"value": "<date>",
											"description": "Ending of the classification time period",
											"type": "text"
										},
										{
											"key": "minCover",
											"value": "0.95",
											"description": "Minimum coverege of both train and target data for a given feature (`indicator x date`) to be used in the classification.\n",
											"type": "text"
										},
										{
											"key": "maxFeatures",
											"value": "60",
											"description": "Maximum number of features used for the classification.\n\nBigger number generally increases classification accuracy but lower the number of features, the quicker classification is performed.\n\nFeatures are selected using the mutual information criterion.\n",
											"type": "text"
										},
										{
											"key": "nTrees",
											"value": "100",
											"description": "Number of trees used by the random forest classification algorithm.",
											"type": "text"
										},
										{
											"key": "minProb",
											"value": "0.66",
											"description": "Minimum probability to keep the predicted class in the output. Pixels with lower probability are assigned the `ambigous` class.",
											"type": "text"
										},
										{
											"key": "indicators",
											"value": "[\"blue\",\"green\",\"red\",\"nir\",\"swir\",\"ndvi\",\"ndmi\",\"ccc\",\"fapar\",\"fcover\",\"lai\",\"str\"]",
											"description": "List of indicators (see the `/indicator` endpoint) used for the classifciation.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/classification",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classification"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Classification performed.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "srcSrid",
											"value": "4326",
											"description": "Projection (SRID code) of the `geometry` parameter value",
											"type": "text"
										},
										{
											"key": "geometry",
											"value": "<string>",
											"description": "geoJSON providing the area to be classified",
											"type": "text"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Optional name of the classification.\n\nClassifications are uniquely identified by sequentialy generated dates (it's done that way so results can be accessed in exacly same way as any other indicator). This parameter allows to define a descriptive label for the classification.\n",
											"type": "text"
										},
										{
											"key": "dateFrom",
											"value": "<date>",
											"description": "Beginning of the classification time period",
											"type": "text"
										},
										{
											"key": "dateTo",
											"value": "<date>",
											"description": "Ending of the classification time period",
											"type": "text"
										},
										{
											"key": "minCover",
											"value": "0.95",
											"description": "Minimum coverege of both train and target data for a given feature (`indicator x date`) to be used in the classification.\n",
											"type": "text"
										},
										{
											"key": "maxFeatures",
											"value": "60",
											"description": "Maximum number of features used for the classification.\n\nBigger number generally increases classification accuracy but lower the number of features, the quicker classification is performed.\n\nFeatures are selected using the mutual information criterion.\n",
											"type": "text"
										},
										{
											"key": "nTrees",
											"value": "100",
											"description": "Number of trees used by the random forest classification algorithm.",
											"type": "text"
										},
										{
											"key": "minProb",
											"value": "0.66",
											"description": "Minimum probability to keep the predicted class in the output. Pixels with lower probability are assigned the `ambigous` class.",
											"type": "text"
										},
										{
											"key": "indicators",
											"value": "[\"blue\",\"green\",\"red\",\"nir\",\"swir\",\"ndvi\",\"ndmi\",\"ccc\",\"fapar\",\"fcover\",\"lai\",\"str\"]",
											"description": "List of indicators (see the `/indicator` endpoint) used for the classifciation.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/classification",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classification"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"user_id\": \"coala\",\n  \"date\": \"2000-01-01T00:00:00.000Z\",\n  \"name\": \"example\",\n  \"state\": \"finished\",\n  \"remarks\": null,\n  \"starttime\": \"2021-09-16T12:55:11.553Z\",\n  \"endtime\": \"2021-09-16T12:58:15.209Z\",\n  \"log\": \"INFO:2021-09-16 14:55:14,503: Reading reference data\\nINFO:2021-09-16 14:55:16,220: Projecting target geometry to indicator zoom levels (...)\\n\",\n  \"params\": {\n    \"nJobs\": 2,\n    \"dateFrom\": \"2018-04-01T00:00:00.000Z\",\n    \"dateTo\": \"2018-09-30T00:00:00.000Z\",\n    \"nTrees\": 100,\n    \"minProb\": 0.66,\n    \"maxFeatures\": 60,\n    \"minCover\": 0.95,\n    \"srcSrid\": 4326,\n    \"geometry\": \"{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[16.5673,48.2101],[16.5673,48.2391],[16.5893,48.2391],[16.5893,48.2101],[16.5673,48.2101]]]}\",\n    \"indicators\": [\n      \"blue\",\n      \"green\",\n      \"red\",\n      \"nir\",\n      \"swir\",\n      \"ndvi\",\n      \"ndmi\",\n      \"ccc\",\n      \"fapar\",\n      \"fcover\",\n      \"lai\",\n      \"str\"\n    ]\n  },\n  \"refdata\": [\n    {\n      \"x\": 16.6391140924664,\n      \"y\": 48.206487648352,\n      \"label\": \"Mais\"\n    },\n    {\n      \"x\": 16.6337805808201,\n      \"y\": 48.2059966592951,\n      \"label\": \"Mais\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "/classification",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/classification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"classification"
							]
						},
						"description": "List performed and scheduled classifications"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/classification",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"classification"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"user_id\": \"coala\",\n    \"date\": \"2000-01-01T00:00:00.000Z\",\n    \"name\": \"example\",\n    \"state\": \"finished\",\n    \"remarks\": null,\n    \"starttime\": \"2021-09-16T12:55:11.553Z\",\n    \"endtime\": \"2021-09-16T12:58:15.209Z\",\n    \"log\": \"INFO:2021-09-16 14:55:14,503: Reading reference data\\nINFO:2021-09-16 14:55:16,220: Projecting target geometry to indicator zoom levels (...)\\n\",\n    \"params\": {\n      \"nJobs\": 2,\n      \"dateFrom\": \"2018-04-01T00:00:00.000Z\",\n      \"dateTo\": \"2018-09-30T00:00:00.000Z\",\n      \"nTrees\": 100,\n      \"minProb\": 0.66,\n      \"maxFeatures\": 60,\n      \"minCover\": 0.95,\n      \"srcSrid\": 4326,\n      \"geometry\": \"{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[16.5673,48.2101],[16.5673,48.2391],[16.5893,48.2391],[16.5893,48.2101],[16.5673,48.2101]]]}\",\n      \"indicators\": [\n        \"blue\",\n        \"green\",\n        \"red\",\n        \"nir\",\n        \"swir\",\n        \"ndvi\",\n        \"ndmi\",\n        \"ccc\",\n        \"fapar\",\n        \"fcover\",\n        \"lai\",\n        \"str\"\n      ]\n    },\n    \"refdata\": [\n      {\n        \"x\": 16.6391140924664,\n        \"y\": 48.206487648352,\n        \"label\": \"Mais\"\n      },\n      {\n        \"x\": 16.6337805808201,\n        \"y\": 48.2059966592951,\n        \"label\": \"Mais\"\n      }\n    ]\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "/rgb",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/rgb?r=<string>&g=<string>&b=<string>&polygonId=<integer>&ownerId=<string>&xyzId=<string>&geometry=<string>&bbox=<string>&srcSrid=4326&z=14&buffer=0&date=<date>&period=14&dateFrom=<date>&dateTo=<date>&daily=<string>&minCover=<float>&scale=raw&format=<string>&rasterFormat=<string>&encode=<string>&position=center&limit=0&srid=<integer>",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"rgb"
					],
					"query": [
						{
							"key": "r",
							"value": "<string>",
							"description": "Id of an indicator to be used as the 1st (_red_) channel.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n"
						},
						{
							"key": "g",
							"value": "<string>",
							"description": "Id of an indicator to be used as the 2nd (_green_) channel.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n"
						},
						{
							"key": "b",
							"value": "<string>",
							"description": "Id of an indicator to be used as the 3rd (_blue_) channel.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n"
						},
						{
							"key": "polygonId",
							"value": "<integer>",
							"description": "Defines the queried area as a registered polygon with a given id.\n  \nIf this parameter is used:\n  \n* `ownerId` must be provided as well.\n* authorization is performed against the polygon's owner account (instead of API users accounts)\n"
						},
						{
							"key": "ownerId",
							"value": "<string>",
							"description": "Id of the `polygonId` owner.\n  \nTo be provided only when `polygonId` parameter is used.\n"
						},
						{
							"key": "xyzId",
							"value": "<string>",
							"description": "Defines the queried area as a XYZ tile in the `x_y_z` format.\n  \nSee [here](https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames) for details.\n  \nCan be combined with `geometry` or `polygonId`. In such a case the returned raster extent will be determined by this parameter but all pixels outside of `geometry`/`polygonId` will be set to no data.\n"
						},
						{
							"key": "geometry",
							"value": "<string>",
							"description": "Defines the queried area as a geoJSON geometry.\n  \nGeometry's projection should be provided with the `srcSrid` parameter.\n"
						},
						{
							"key": "bbox",
							"value": "<string>",
							"description": "Defines the queried area as a bounding box in the `x1,y1,x2,y2` format.\n  \nCoordinates projection should be provided with the `srcSrid` parameter.\n"
						},
						{
							"key": "srcSrid",
							"value": "4326",
							"description": "An EPSG code of request's spatial parameters (like `geometry`), e.g. 4326 (WGS-84) or 3857 (Web Mercator).\n"
						},
						{
							"key": "z",
							"value": "14",
							"description": "Raster data zoom level.\n  \nThe raster piramids level to be used to fetch the data from - see [here](https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Resolution_and_Scale) for details.\n  \nRange of available values vary between indicators. You can check it using the `/indicator` endpoint.\n\nThe default value is the maximum value available for a given indicator.\n"
						},
						{
							"key": "buffer",
							"value": "0",
							"description": "A buffer size (in meters) to be applied to the `geometry`.\n  \nUsefeul when `geometry` is a point or to assure returned raster data contains also pixels which centroids don't intersect th `geometry`.\n\nWhen negative number is provided, the final `geometry` will be a bounding box of original `geometry` with a positive buffer value applied.\n"
						},
						{
							"key": "date",
							"value": "<date>",
							"description": "An alternative way of defining the time period. If `dateFrom` or `dateTo` aren't provided, their default values is `date - period` and `date + period`, respectively.\n\nA value of `now` indicates the current date.\n\nA default value is the current date.\n"
						},
						{
							"key": "period",
							"value": "14",
							"description": "An alternative way of defining the time period. If `dateFrom` or `dateTo` aren't provided, their default values is `date - period` and `date + period`, respectively.\n"
						},
						{
							"key": "dateFrom",
							"value": "<date>",
							"description": "Beginning of the queried time period.\n\nThe default value is `date - period`.\n"
						},
						{
							"key": "dateTo",
							"value": "<date>",
							"description": "End of the queried time period.\n\nThe default value is `date + period`.\n"
						},
						{
							"key": "daily",
							"value": "<string>",
							"description": "If not present or with the `0` value, data is gathered from actual acquistions.\n\nIf `daily=1`, interpolated daily data is used instead. This assures data exists for each day in the requested time period. Daily data are generated on the fly and cached. It means if you request data outside of cache, generating them will take (a lot of) time.\n\nThis parameter is still in experimental phase and may not work correctly.\n"
						},
						{
							"key": "minCover",
							"value": "<float>",
							"description": "Minimum coverage provided by an acquisition to be included in the response.\n  \n0 means no coverage and 1 means full coverage only.\n  \nProviding a value will cause coverage statistics to be included in the response.\n\nDefault value varies between indicators. You can check it using the `/indciator` endpoint.\n"
						},
						{
							"key": "scale",
							"value": "raw",
							"description": "Determines the way raster values are scaled.\n  \n* raw - use values as they are stored in the database (e.g. 0-80 for LAI)\n* real - rescale values to indicator's phisical values range (e.g. 0-8 fro LAI)\n* stdfloat - standardize to mean 0 and standard deviation 1 within the scene\n* stdbyte - standardize to mean 127 and standard deviation 25 within the scene\n* stretch - transform in a way the minimum value within the scene equals 0 and maximum equals 254\n* grayscale - transform in a way minimum phisical value of the indicator corresponds to 0 and maximum to 254\n"
						},
						{
							"key": "format",
							"value": "<string>",
							"description": "Response format.\n  \nThe actual content of the `application/*` responses depends on `encode` parameter value.\n\n`image/tiff` response format returns acquisitions stacked as bands.\n\nAs `image/jpeg`, `image/png` and geoJSON response formats are unable to return more that one acquisition, only the most recent one is returned.\n"
						},
						{
							"key": "rasterFormat",
							"value": "<string>",
							"description": "Returned raster data format.\n  \nIt doesn't determine the response format (this is determined by the `format` parameter) and is affected by the `encode` parameter.\n"
						},
						{
							"key": "encode",
							"value": "<string>",
							"description": "Determines the way raster data values are represented.\n\n* `raw` means raster data will be provided as they are. This value is set automatically for `image/*` reponse formats (when `format` equals to `image/png`, `image/jpeg` or `image/tiff`) and is invalid for other response formats.\n* `base64` and `hex` means raster data will be base64 or hex encoded. This settings are valid only when `format` equals to `application/json` and `rasterFormat` is one of `image/png`, `image/jpeg` or `image/tiff`.\n* `values` causes pixes values to be converted into a vector representation. If the `format` indicates geoJSON response, every pixel will be turned into a geoJSON feature and for `application/json` response format pixels will be represented by a collection of objects providing pixel position and value. The way pixel position is represented is determined by the `position` parameter.\n* `stats` causes raster data to be skipped and only summary statistics (valid pixel count, requested area coverage, min, max, mean value, standard deviation) to be returned.\n"
						},
						{
							"key": "position",
							"value": "center",
							"description": "The position within a pixel being used as a pixel's vector representation.\n\n* `corner` indicates upper-left corner\n* `center` indicates center\n* `polygon` indicates a polygon covering whole pixel area\n"
						},
						{
							"key": "limit",
							"value": "0",
							"description": "Maximum number of acqusitions returned (0 means no limit).\n"
						},
						{
							"key": "srid",
							"value": "<integer>",
							"description": "An EPSG code of returned spatial objects projection, e.g. 4326 (WGS-84) or 3857 (Web Mercator)\n\nIf not provided `srcSrid` parameter value is used and if `srcSrid` parameter isn't provided as well, a default value of `4326` is assumed.\n"
						}
					]
				},
				"description": "`/indicator/{indicatorId}/rasterData` endpoint equivalent for getting true and false color RGB composites.\n\nFor detailed description see the `/indicator/{indicatorId}/rasterData` endpoint. There are only a few noticable differences:\n\n* indicators to be used as R/G/B channels are indicated using `r`, `g` and `b` query parameters (see below) instead of the `{indicatorId}` path parameter\n* the `colorMap` parameter isn't supported\n* as a single date image is already multiband, it's impossible to stack output of many dates into one `image/tiff`\n\nIt's worth noting that:\n\n* Supplied parameters are applied to all bands.\n* If an indicator is not stored on the `[0, 255]` scale (see the `grayscaleMinValue` and `grayscaleMaxValue` reported for a given indicator by the `/indicator` endpoint) it might be worth to set `scale` to `grayscale`.\n"
			},
			"response": [
				{
					"name": "Wrong parameter values",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/rgb?r=<string>&g=<string>&b=<string>&polygonId=<integer>&ownerId=<string>&xyzId=<string>&geometry=<string>&bbox=<string>&srcSrid=4326&z=14&buffer=0&date=<date>&period=14&dateFrom=<date>&dateTo=<date>&daily=<string>&minCover=<float>&scale=raw&format=<string>&rasterFormat=<string>&encode=<string>&position=center&limit=0&srid=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rgb"
							],
							"query": [
								{
									"key": "r",
									"value": "<string>"
								},
								{
									"key": "g",
									"value": "<string>"
								},
								{
									"key": "b",
									"value": "<string>"
								},
								{
									"key": "polygonId",
									"value": "<integer>"
								},
								{
									"key": "ownerId",
									"value": "<string>"
								},
								{
									"key": "xyzId",
									"value": "<string>"
								},
								{
									"key": "geometry",
									"value": "<string>"
								},
								{
									"key": "bbox",
									"value": "<string>"
								},
								{
									"key": "srcSrid",
									"value": "4326"
								},
								{
									"key": "z",
									"value": "14"
								},
								{
									"key": "buffer",
									"value": "0"
								},
								{
									"key": "date",
									"value": "<date>"
								},
								{
									"key": "period",
									"value": "14"
								},
								{
									"key": "dateFrom",
									"value": "<date>"
								},
								{
									"key": "dateTo",
									"value": "<date>"
								},
								{
									"key": "daily",
									"value": "<string>"
								},
								{
									"key": "minCover",
									"value": "<float>"
								},
								{
									"key": "scale",
									"value": "raw"
								},
								{
									"key": "format",
									"value": "<string>"
								},
								{
									"key": "rasterFormat",
									"value": "<string>"
								},
								{
									"key": "encode",
									"value": "<string>"
								},
								{
									"key": "position",
									"value": "center"
								},
								{
									"key": "limit",
									"value": "0"
								},
								{
									"key": "srid",
									"value": "<integer>"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/rgb?r=<string>&g=<string>&b=<string>&polygonId=<integer>&ownerId=<string>&xyzId=<string>&geometry=<string>&bbox=<string>&srcSrid=4326&z=14&buffer=0&date=<date>&period=14&dateFrom=<date>&dateTo=<date>&daily=<string>&minCover=<float>&scale=raw&format=<string>&rasterFormat=<string>&encode=<string>&position=center&limit=0&srid=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rgb"
							],
							"query": [
								{
									"key": "r",
									"value": "<string>"
								},
								{
									"key": "g",
									"value": "<string>"
								},
								{
									"key": "b",
									"value": "<string>"
								},
								{
									"key": "polygonId",
									"value": "<integer>"
								},
								{
									"key": "ownerId",
									"value": "<string>"
								},
								{
									"key": "xyzId",
									"value": "<string>"
								},
								{
									"key": "geometry",
									"value": "<string>"
								},
								{
									"key": "bbox",
									"value": "<string>"
								},
								{
									"key": "srcSrid",
									"value": "4326"
								},
								{
									"key": "z",
									"value": "14"
								},
								{
									"key": "buffer",
									"value": "0"
								},
								{
									"key": "date",
									"value": "<date>"
								},
								{
									"key": "period",
									"value": "14"
								},
								{
									"key": "dateFrom",
									"value": "<date>"
								},
								{
									"key": "dateTo",
									"value": "<date>"
								},
								{
									"key": "daily",
									"value": "<string>"
								},
								{
									"key": "minCover",
									"value": "<float>"
								},
								{
									"key": "scale",
									"value": "raw"
								},
								{
									"key": "format",
									"value": "<string>"
								},
								{
									"key": "rasterFormat",
									"value": "<string>"
								},
								{
									"key": "encode",
									"value": "<string>"
								},
								{
									"key": "position",
									"value": "center"
								},
								{
									"key": "limit",
									"value": "0"
								},
								{
									"key": "srid",
									"value": "<integer>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{}"
				}
			]
		},
		{
			"name": "/wmts",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/wmts?indicator=<string>&date=<date>&period=14&dateFrom=<date>&dateTo=<date>&daily=<string>",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"wmts"
					],
					"query": [
						{
							"key": "indicator",
							"value": "<string>",
							"description": "Indicator name.\n\nThe `/indicator` endpoint provides a list of all available indicators.\n\nIndicators availbility may vary across both spatial and temporal domain. \n"
						},
						{
							"key": "date",
							"value": "<date>",
							"description": "An alternative way of defining the time period. If `dateFrom` or `dateTo` aren't provided, their default values is `date - period` and `date + period`, respectively.\n\nA value of `now` indicates the current date.\n\nA default value is the current date.\n"
						},
						{
							"key": "period",
							"value": "14",
							"description": "An alternative way of defining the time period. If `dateFrom` or `dateTo` aren't provided, their default values is `date - period` and `date + period`, respectively.\n"
						},
						{
							"key": "dateFrom",
							"value": "<date>",
							"description": "Beginning of the queried time period.\n\nThe default value is `date - period`.\n"
						},
						{
							"key": "dateTo",
							"value": "<date>",
							"description": "End of the queried time period.\n\nThe default value is `date + period`.\n"
						},
						{
							"key": "daily",
							"value": "<string>",
							"description": "If not present or with the `0` value, data is gathered from actual acquistions.\n\nIf `daily=1`, interpolated daily data is used instead. This assures data exists for each day in the requested time period. Daily data are generated on the fly and cached. It means if you request data outside of cache, generating them will take (a lot of) time.\n\nThis parameter is still in experimental phase and may not work correctly.\n"
						}
					]
				},
				"description": "WMTS getCapabilities endpoint.\n\nAs number of layers provided by the whole database can be huge (up to few thousands), the endpoint takes optional parameters allowing to limit reported layers only to given indicator and/or time period.\n"
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/wmts?indicator=<string>&date=<date>&period=14&dateFrom=<date>&dateTo=<date>&daily=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wmts"
							],
							"query": [
								{
									"key": "indicator",
									"value": "<string>"
								},
								{
									"key": "date",
									"value": "<date>"
								},
								{
									"key": "period",
									"value": "14"
								},
								{
									"key": "dateFrom",
									"value": "<date>"
								},
								{
									"key": "dateTo",
									"value": "<date>"
								},
								{
									"key": "daily",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "xml",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/xml"
						}
					],
					"cookie": [],
					"body": "officia veniam"
				},
				{
					"name": "Access to a given indicator denied or no access rights to the whole endpoint.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/wmts?indicator=<string>&date=<date>&period=14&dateFrom=<date>&dateTo=<date>&daily=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wmts"
							],
							"query": [
								{
									"key": "indicator",
									"value": "<string>"
								},
								{
									"key": "date",
									"value": "<date>"
								},
								{
									"key": "period",
									"value": "14"
								},
								{
									"key": "dateFrom",
									"value": "<date>"
								},
								{
									"key": "dateTo",
									"value": "<date>"
								},
								{
									"key": "daily",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "/eama",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "srid",
							"value": "<integer>",
							"description": "Projection used by the XML file",
							"type": "text"
						},
						{
							"key": "data",
							"description": "A zip file containing a set of shapefile files or an eAMA XML file.",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/eama",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"eama"
					]
				},
				"description": "Converts a shapefile or an eAMA file to a geoJSON."
			},
			"response": [
				{
					"name": "OK",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: basic",
								"key": "Authorization",
								"value": "Basic <credentials>"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "srid",
									"value": "<integer>",
									"description": "Projection used by the XML file",
									"type": "text"
								},
								{
									"key": "data",
									"value": "<binary>",
									"description": "A zip file containing a set of shapefile files or an eAMA XML file.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/eama",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"eama"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"type\": \"FeatureCollection\",\n  \"crs\": {\n    \"type\": \"name\",\n    \"properties\": {\n      \"name\": \"urn:ogc:def:crs:EPSG::4326\"\n    }\n  },\n  \"features\": [\n    {\n      \"type\": \"feature\",\n      \"properties\": {\n        \"FSNAME\": \"KAMMERHUT\",\n        \"SNART\": \"WINTERWEICHWEIZEN\"\n      },\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              16.088808944675,\n              48.382136660004\n            ],\n            [\n              16.088481986667,\n              48.381547097448\n            ],\n            [\n              16.093412269962,\n              48.381594290491\n            ],\n            [\n              16.093411515164,\n              48.381694476408\n            ],\n            [\n              16.093448755532,\n              48.382181070115\n            ],\n            [\n              16.088808944675,\n              48.382136660004\n            ]\n          ]\n        ]\n      }\n    },\n    {\n      \"type\": \"feature\",\n      \"properties\": {\n        \"FSNAME\": \"VIEHTRIEFT\",\n        \"SNART\": \"WINTERWEICHWEIZEN\"\n      },\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              16.093703874685,\n              48.383697187703\n            ],\n            [\n              16.093701030978,\n              48.383668677958\n            ],\n            [\n              16.101312762621,\n              48.38412322853\n            ],\n            [\n              16.101289912046,\n              48.384864740424\n            ],\n            [\n              16.093770937756,\n              48.384415687886\n            ],\n            [\n              16.093703874685,\n              48.383697187703\n            ]\n          ]\n        ]\n      }\n    }\n  ]\n}"
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{coalaToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.coalaproject.eu/api"
		}
	]
}